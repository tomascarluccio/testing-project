{
	"info": {
		"_postman_id": "3490baa3-beae-4f62-bbbe-e010d103d50f",
		"name": "API_V5",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18303830"
	},
	"item": [
		{
			"name": "Tenant",
			"item": [
				{
					"name": "LDAPConfiguration",
					"item": [
						{
							"name": "Create LDAPConfiguration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Name is test\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal( pm.variables.get(\"ldap_name\")  );",
											"});",
											"",
											"pm.test(\"Domain ok\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.domain).to.equal(pm.variables.get(\"ldap_domain\"));",
											"});",
											"",
											"pm.test(\"Get LDAP id\", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData)",
											"    pm.expect(jsonData['serial_number'])!=null;",
											"    pm.collectionVariables.set(\"ldap_configuration_id\", jsonData['id']);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "is_active",
											"value": "true",
											"type": "text"
										},
										{
											"key": "ldap_type",
											"value": "AD",
											"type": "text"
										},
										{
											"key": "name",
											"value": "{{ldap_name}}",
											"type": "text"
										},
										{
											"key": "domain",
											"value": "{{ldap_domain}}",
											"type": "text"
										},
										{
											"key": "server",
											"value": "{{ldap_server}}",
											"type": "text"
										},
										{
											"key": "port",
											"value": "636",
											"type": "text"
										},
										{
											"key": "bind_dn",
											"value": "{{ldap_bind_dn}}",
											"type": "text"
										},
										{
											"key": "bind_password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "root_dn",
											"value": "DC=altipeak,DC=ch",
											"type": "text"
										},
										{
											"key": "user_search",
											"value": "{{ldap_user_search}}",
											"type": "text"
										},
										{
											"key": "search_filter",
											"value": "(&(|(objectclass=User)(objectclass=Person))(!(objectclass=Computer)))",
											"type": "text"
										},
										{
											"key": "map_uid_attr",
											"value": "sAMAccountName",
											"type": "text"
										},
										{
											"key": "map_secondary_uid_attr",
											"value": "userPrincipalName",
											"type": "text"
										},
										{
											"key": "map_first_name_attr",
											"value": "givenName",
											"type": "text"
										},
										{
											"key": "map_last_name_attr",
											"value": "sn",
											"type": "text"
										},
										{
											"key": "map_email_attr",
											"value": "mail",
											"type": "text"
										},
										{
											"key": "map_mobile_attr",
											"value": "mobile",
											"type": "text"
										},
										{
											"key": "map_user_status_attr",
											"value": "userAccountControl",
											"type": "text"
										},
										{
											"key": "map_pwd_last_set_attr",
											"value": "pwdLastSet",
											"type": "text"
										},
										{
											"key": "map_maximum_password_age",
											"value": "maxPwdAge",
											"type": "text"
										},
										{
											"key": "map_swisscom_mobile_id_sn_attr",
											"value": "",
											"type": "text"
										},
										{
											"key": "map_immutableid_attr",
											"value": "objectGUID",
											"type": "text"
										},
										{
											"key": "priority",
											"value": "2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/ldapconfiguration/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"ldapconfiguration",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create LDAPConfiguration - already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Domain already exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.domain[0]).to.equal(\"LDAP configuration with this Domain already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "is_active",
											"value": "true",
											"type": "text"
										},
										{
											"key": "ldap_type",
											"value": "AD",
											"type": "text"
										},
										{
											"key": "name",
											"value": "{{user}}",
											"type": "text"
										},
										{
											"key": "domain",
											"value": "{{ldap_domain}}",
											"type": "text"
										},
										{
											"key": "server",
											"value": "{{ldap_server}}",
											"type": "text"
										},
										{
											"key": "port",
											"value": "636",
											"type": "text"
										},
										{
											"key": "bind_dn",
											"value": "{{ldap_bind_dn}}",
											"type": "text"
										},
										{
											"key": "bind_password",
											"value": "Safewalk!145",
											"type": "text"
										},
										{
											"key": "root_dn",
											"value": "DC=altipeak,DC=ch",
											"type": "text"
										},
										{
											"key": "user_search",
											"value": "{{ldap_user_search}}",
											"type": "text"
										},
										{
											"key": "search_filter",
											"value": "(&(|(objectclass=User)(objectclass=Person))(!(objectclass=Computer)))",
											"type": "text"
										},
										{
											"key": "map_uid_attr",
											"value": "sAMAccountName",
											"type": "text"
										},
										{
											"key": "map_secondary_uid_attr",
											"value": "userPrincipalName",
											"type": "text"
										},
										{
											"key": "map_first_name_attr",
											"value": "givenName",
											"type": "text"
										},
										{
											"key": "map_last_name_attr",
											"value": "sn",
											"type": "text"
										},
										{
											"key": "map_email_attr",
											"value": "mail",
											"type": "text"
										},
										{
											"key": "map_mobile_attr",
											"value": "mobile",
											"type": "text"
										},
										{
											"key": "map_user_status_attr",
											"value": "userAccountControl",
											"type": "text"
										},
										{
											"key": "map_pwd_last_set_attr",
											"value": "pwdLastSet",
											"type": "text"
										},
										{
											"key": "map_maximum_password_age",
											"value": "maxPwdAge",
											"type": "text"
										},
										{
											"key": "map_swisscom_mobile_id_sn_attr",
											"value": "",
											"type": "text"
										},
										{
											"key": "map_immutableid_attr",
											"value": "objectGUID",
											"type": "text"
										},
										{
											"key": "priority",
											"value": "2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/ldapconfiguration/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"ldapconfiguration",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create LDAPConfiguration - missing all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Missing user_search\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.user_search[0]).to.equal(\"This field is required.\");",
											"});",
											"",
											"pm.test(\"Missing domain\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.domain[0]).to.equal(\"This field is required.\");",
											"});",
											"",
											"pm.test(\"Missing bind_dn \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.bind_dn[0]).to.equal(\"This field is required.\");",
											"});",
											"",
											"pm.test(\"Missing bind_password\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.bind_password[0]).to.equal(\"This field is required.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "is_active",
											"value": "true",
											"type": "text"
										},
										{
											"key": "ldap_type",
											"value": "AD",
											"type": "text"
										},
										{
											"key": "port",
											"value": "636",
											"type": "text"
										},
										{
											"key": "search_filter",
											"value": "(&(|(objectclass=User)(objectclass=Person))(!(objectclass=Computer)))",
											"type": "text"
										},
										{
											"key": "map_uid_attr",
											"value": "sAMAccountName",
											"type": "text"
										},
										{
											"key": "map_secondary_uid_attr",
											"value": "userPrincipalName",
											"type": "text"
										},
										{
											"key": "map_first_name_attr",
											"value": "givenName",
											"type": "text"
										},
										{
											"key": "map_last_name_attr",
											"value": "sn",
											"type": "text"
										},
										{
											"key": "map_email_attr",
											"value": "mail",
											"type": "text"
										},
										{
											"key": "map_mobile_attr",
											"value": "mobile",
											"type": "text"
										},
										{
											"key": "map_user_status_attr",
											"value": "userAccountControl",
											"type": "text"
										},
										{
											"key": "map_pwd_last_set_attr",
											"value": "pwdLastSet",
											"type": "text"
										},
										{
											"key": "map_maximum_password_age",
											"value": "maxPwdAge",
											"type": "text"
										},
										{
											"key": "map_swisscom_mobile_id_sn_attr",
											"value": "",
											"type": "text"
										},
										{
											"key": "map_immutableid_attr",
											"value": "objectGUID",
											"type": "text"
										},
										{
											"key": "priority",
											"value": "2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/ldapconfiguration/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"ldapconfiguration",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create LDAPConfiguration - cant connect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Cant connect\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.__all__[0]).to.equal(\"LDAP connection error. Please verify the parameters for primary LDAP and try again.\\nDetail: {'desc': \\\"Can't contact LDAP server\\\"}\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "is_active",
											"value": "true",
											"type": "text"
										},
										{
											"key": "ldap_type",
											"value": "AD",
											"type": "text"
										},
										{
											"key": "name",
											"value": "test",
											"type": "text"
										},
										{
											"key": "domain",
											"value": "{{notExists}}",
											"type": "text"
										},
										{
											"key": "server",
											"value": "ldap://192.168.1.150",
											"type": "text"
										},
										{
											"key": "port",
											"value": "636",
											"type": "text"
										},
										{
											"key": "bind_dn",
											"value": "CN=Administrador,CN=Users,DC=ad,DC=safewalk",
											"type": "text"
										},
										{
											"key": "bind_password",
											"value": "Altipeak1",
											"type": "text"
										},
										{
											"key": "root_dn",
											"value": "DC=altipeak,DC=ch",
											"type": "text"
										},
										{
											"key": "user_search",
											"value": "DC=ad,DC=safewalk",
											"type": "text"
										},
										{
											"key": "search_filter",
											"value": "(&(|(objectclass=User)(objectclass=Person))(!(objectclass=Computer)))",
											"type": "text"
										},
										{
											"key": "map_uid_attr",
											"value": "sAMAccountName",
											"type": "text"
										},
										{
											"key": "map_secondary_uid_attr",
											"value": "userPrincipalName",
											"type": "text"
										},
										{
											"key": "map_first_name_attr",
											"value": "givenName",
											"type": "text"
										},
										{
											"key": "map_last_name_attr",
											"value": "sn",
											"type": "text"
										},
										{
											"key": "map_email_attr",
											"value": "mail",
											"type": "text"
										},
										{
											"key": "map_mobile_attr",
											"value": "mobile",
											"type": "text"
										},
										{
											"key": "map_user_status_attr",
											"value": "userAccountControl",
											"type": "text"
										},
										{
											"key": "map_pwd_last_set_attr",
											"value": "pwdLastSet",
											"type": "text"
										},
										{
											"key": "map_maximum_password_age",
											"value": "maxPwdAge",
											"type": "text"
										},
										{
											"key": "map_swisscom_mobile_id_sn_attr",
											"value": "",
											"type": "text"
										},
										{
											"key": "map_immutableid_attr",
											"value": "objectGUID",
											"type": "text"
										},
										{
											"key": "priority",
											"value": "443",
											"type": "text"
										},
										{
											"key": "gateway",
											"value": "1",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/ldapconfiguration/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"ldapconfiguration",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create LDAPConfiguration - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalid_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "is_active",
											"value": "true",
											"type": "text"
										},
										{
											"key": "ldap_type",
											"value": "AD",
											"type": "text"
										},
										{
											"key": "name",
											"value": "{{user}}",
											"type": "text"
										},
										{
											"key": "domain",
											"value": "{{ldap_domain}}",
											"type": "text"
										},
										{
											"key": "server",
											"value": "{{ldap_server}}",
											"type": "text"
										},
										{
											"key": "port",
											"value": "636",
											"type": "text"
										},
										{
											"key": "bind_dn",
											"value": "{{ldap_bind_dn}}",
											"type": "text"
										},
										{
											"key": "bind_password",
											"value": "Safewalk!145",
											"type": "text"
										},
										{
											"key": "root_dn",
											"value": "DC=altipeak,DC=ch",
											"type": "text",
											"disabled": true
										},
										{
											"key": "user_search",
											"value": "{{ldap_user_search}}",
											"type": "text"
										},
										{
											"key": "search_filter",
											"value": "(&(|(objectclass=User)(objectclass=Person))(!(objectclass=Computer)))",
											"type": "text"
										},
										{
											"key": "map_uid_attr",
											"value": "sAMAccountName",
											"type": "text"
										},
										{
											"key": "map_secondary_uid_attr",
											"value": "userPrincipalName",
											"type": "text"
										},
										{
											"key": "map_first_name_attr",
											"value": "givenName",
											"type": "text"
										},
										{
											"key": "map_last_name_attr",
											"value": "sn",
											"type": "text"
										},
										{
											"key": "map_email_attr",
											"value": "mail",
											"type": "text"
										},
										{
											"key": "map_mobile_attr",
											"value": "mobile",
											"type": "text"
										},
										{
											"key": "map_user_status_attr",
											"value": "userAccountControl",
											"type": "text"
										},
										{
											"key": "map_pwd_last_set_attr",
											"value": "pwdLastSet",
											"type": "text"
										},
										{
											"key": "map_maximum_password_age",
											"value": "maxPwdAge",
											"type": "text"
										},
										{
											"key": "map_swisscom_mobile_id_sn_attr",
											"value": "",
											"type": "text"
										},
										{
											"key": "map_immutableid_attr",
											"value": "objectGUID",
											"type": "text"
										},
										{
											"key": "priority",
											"value": "2",
											"type": "text"
										},
										{
											"key": "gateway",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/ldapconfiguration/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"ldapconfiguration",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create LDAPConfiguration - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "is_active",
											"value": "true",
											"type": "text"
										},
										{
											"key": "ldap_type",
											"value": "AD",
											"type": "text"
										},
										{
											"key": "name",
											"value": "{{user}}",
											"type": "text"
										},
										{
											"key": "domain",
											"value": "{{ldap_domain}}",
											"type": "text"
										},
										{
											"key": "server",
											"value": "{{ldap_server}}",
											"type": "text"
										},
										{
											"key": "port",
											"value": "636",
											"type": "text"
										},
										{
											"key": "bind_dn",
											"value": "{{ldap_bind_dn}}",
											"type": "text"
										},
										{
											"key": "bind_password",
											"value": "Safewalk!145",
											"type": "text"
										},
										{
											"key": "root_dn",
											"value": "DC=altipeak,DC=ch",
											"type": "text",
											"disabled": true
										},
										{
											"key": "user_search",
											"value": "{{ldap_user_search}}",
											"type": "text"
										},
										{
											"key": "search_filter",
											"value": "(&(|(objectclass=User)(objectclass=Person))(!(objectclass=Computer)))",
											"type": "text"
										},
										{
											"key": "map_uid_attr",
											"value": "sAMAccountName",
											"type": "text"
										},
										{
											"key": "map_secondary_uid_attr",
											"value": "userPrincipalName",
											"type": "text"
										},
										{
											"key": "map_first_name_attr",
											"value": "givenName",
											"type": "text"
										},
										{
											"key": "map_last_name_attr",
											"value": "sn",
											"type": "text"
										},
										{
											"key": "map_email_attr",
											"value": "mail",
											"type": "text"
										},
										{
											"key": "map_mobile_attr",
											"value": "mobile",
											"type": "text"
										},
										{
											"key": "map_user_status_attr",
											"value": "userAccountControl",
											"type": "text"
										},
										{
											"key": "map_pwd_last_set_attr",
											"value": "pwdLastSet",
											"type": "text"
										},
										{
											"key": "map_maximum_password_age",
											"value": "maxPwdAge",
											"type": "text"
										},
										{
											"key": "map_swisscom_mobile_id_sn_attr",
											"value": "",
											"type": "text"
										},
										{
											"key": "map_immutableid_attr",
											"value": "objectGUID",
											"type": "text"
										},
										{
											"key": "priority",
											"value": "2",
											"type": "text"
										},
										{
											"key": "gateway",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/ldapconfiguration/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"ldapconfiguration",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "List LDAPConfiguration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// pm.test(\"Count is 1 \", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.count).to.equal(1);",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/ldapconfiguration/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"ldapconfiguration",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "List LDAPConfiguration - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalid_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/ldapconfiguration/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"ldapconfiguration",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "List LDAPConfiguration - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/ldapconfiguration/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"ldapconfiguration",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "MessageGateway",
					"item": [
						{
							"name": "Edit admin email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "automation@altipeak.com",
											"type": "text"
										},
										{
											"key": "mobile_phone",
											"value": "+3700000000",
											"type": "text",
											"disabled": true
										},
										{
											"key": "additional_information",
											"value": "{\"custom_info\": \"write whatever you want\"}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "last_name",
											"value": "Lastname2",
											"type": "text",
											"disabled": true
										},
										{
											"key": "first_name",
											"value": "firstname2",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/admin/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"admin",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Message Gateway",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{msg-name}}",
											"type": "text"
										},
										{
											"key": "gateway",
											"value": "{{msg-gateway}}",
											"type": "text"
										},
										{
											"key": "config_params",
											"value": "{{msg-cofig}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/gatewayaccount/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"gatewayaccount",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Message Gateway - already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Already exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name[0]).to.equal(\"Messages delivery gateway with this Name already exists.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{msg-name}}",
											"type": "text"
										},
										{
											"key": "gateway",
											"value": "{{msg-gateway}}",
											"type": "text"
										},
										{
											"key": "config_params",
											"value": "{{msg-cofig}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/gatewayaccount/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"gatewayaccount",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Message Gateway - missing parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Missing name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name[0]).to.equal(\"This field is required.\");",
											"});",
											"",
											"pm.test(\"Missing config_params\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.config_params[0]).to.equal(\"This field is required.\");",
											"});",
											"",
											"pm.test(\"Missing gateway\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.gateway[0]).to.equal(\"This field is required.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Message Gateway",
											"type": "text",
											"disabled": true
										},
										{
											"key": "gateway",
											"value": "SMTP",
											"type": "text",
											"disabled": true
										},
										{
											"key": "config_params",
											"value": "{ \"username\": \"no_reply@westlab.ch\", \"use_tls\": false, \"host\": \"192.168.99.172\", \"timeout\": 60, \"password\": \"\", \"port\": 25}",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/gatewayaccount/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"gatewayaccount",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Message Gateway - wrong gateway",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Wrong gateway\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.gateway[0]).to.equal(\"Select a valid choice. SMTPP is not one of the available choices.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{msg-name}}",
											"type": "text"
										},
										{
											"key": "gateway",
											"value": "SMTPP",
											"type": "text"
										},
										{
											"key": "config_params",
											"value": "{{msg-cofig}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/gatewayaccount/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"gatewayaccount",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Message Gateway - negative values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Negative port\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.port[0]).to.equal(\"Ensure this value is greater than or equal to 1.\");",
											"});",
											"",
											"pm.test(\"Negative timeout\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.timeout[0]).to.equal(\"Ensure this value is greater than or equal to 1.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{msg-name}}",
											"type": "text"
										},
										{
											"key": "gateway",
											"value": "{{msg-gateway}}",
											"type": "text"
										},
										{
											"key": "config_params",
											"value": "{ \"username\": \"no_reply@westlab.ch\", \"use_tls\": false, \"host\": \"192.168.99.172\", \"timeout\": -5, \"password\": \"\", \"port\": -5}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/gatewayaccount/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"gatewayaccount",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Message Gateway - invalid username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Negative port\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.username[0]).to.equal(\"Enter a valid email address.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{msg-name}}",
											"type": "text"
										},
										{
											"key": "gateway",
											"value": "{{msg-gateway}}",
											"type": "text"
										},
										{
											"key": "config_params",
											"value": "{ \"username\": \"no_replyh\", \"use_tls\": false, \"host\": \"192.168.99.172\", \"timeout\": 60, \"password\": \"\", \"port\": 25}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/gatewayaccount/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"gatewayaccount",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Message Gateway - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalid_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{msg-name}}",
											"type": "text"
										},
										{
											"key": "gateway",
											"value": "{{msg-gateway}}",
											"type": "text"
										},
										{
											"key": "config_params",
											"value": "{{msg-cofig}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/gatewayaccount/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"gatewayaccount",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Message Gateway - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{msg-name}}",
											"type": "text"
										},
										{
											"key": "gateway",
											"value": "{{msg-gateway}}",
											"type": "text"
										},
										{
											"key": "config_params",
											"value": "{{msg-cofig}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/gatewayaccount/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"gatewayaccount",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "List Message Gateway",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Count is 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.count).to.equal(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/gatewayaccount/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"gatewayaccount",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "List Message Gateway - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalid_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/gatewayaccount/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"gatewayaccount",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "List Message Gateway - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/gatewayaccount/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"gatewayaccount",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User",
					"item": [
						{
							"name": "Create user \"test\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"username\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.username).to.eql(environment[\"user\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "test@altipeak.com",
											"type": "text",
											"disabled": true
										},
										{
											"key": "mobile_phone",
											"value": "+3712312312",
											"type": "text",
											"disabled": true
										},
										{
											"key": "username",
											"value": "{{test-tenant-user}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{test-tenant-password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user \"test\" - already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"The user test already exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.username).to.contains(\"The user test already exists\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "test@altipeak.com",
											"type": "text"
										},
										{
											"key": "mobile_phone",
											"value": "+3712312312",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{test-tenant-user}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{test-tenant-password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user - Invalid Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Please enter a valid username\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.username).to.contains(\"Please enter a valid username\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "test@altipeak.com",
											"type": "text",
											"disabled": true
										},
										{
											"key": "mobile_phone",
											"value": "+3712312312",
											"type": "text",
											"disabled": true
										},
										{
											"key": "username",
											"value": "{{userInvalid}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{test-tenant-password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user - without username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Missing username\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.username).to.contains(\"This field is required.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "test@altipeak.com",
											"type": "text",
											"disabled": true
										},
										{
											"key": "mobile_phone",
											"value": "+3712312312",
											"type": "text",
											"disabled": true
										},
										{
											"key": "username",
											"value": "",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{test-tenant-password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user - without password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Missing password\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.password).to.contains(\"This field is required.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "test@altipeak.com",
											"type": "text"
										},
										{
											"key": "mobile_phone",
											"value": "+3712312312",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{user2}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user - without username and password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Missing username\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.username).to.contains(\"This field is required.\");",
											"});",
											"",
											"pm.test(\"Missing password\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.password).to.contains(\"This field is required.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "test@altipeak.com",
											"type": "text"
										},
										{
											"key": "mobile_phone",
											"value": "+3712312312",
											"type": "text"
										},
										{
											"key": "username",
											"value": "",
											"type": "text"
										},
										{
											"key": "password",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user - witht email and phone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"username\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.username).to.eql(\"test2\");",
											"});",
											"",
											"pm.test(\"username\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.db_mobile_phone).to.eql(\"+3712312312\");",
											"});",
											"",
											"pm.test(\"username\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.db_email).to.eql(\"test@altipeak.com\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "test@altipeak.com",
											"type": "text"
										},
										{
											"key": "mobile_phone",
											"value": "+3712312312",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{user2}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{test-tenant-password}}",
											"type": "text"
										},
										{
											"key": "",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user - witht name and lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"username\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.username).to.eql(\"test3\");",
											"});",
											"",
											"pm.test(\"username\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.first_name).to.eql(\"name\");",
											"});",
											"",
											"pm.test(\"username\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.last_name).to.eql(\"lastname\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{user3}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{test-tenant-password}}",
											"type": "text"
										},
										{
											"key": "first_name",
											"value": "name",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "lastname",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user - invalid auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.eql(\"Invalid token\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "5fa325e4c128d34349821b7c73d2434b7c7cd16c",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{user}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user - without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing Authentication Token.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.eql(\"Authentication credentials were not provided.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{user}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"username is \\\"test\\\"\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.username).to.contains(environment[\"user\"]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{test-tenant-user}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{test-tenant-user}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user - with phone and email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"username is \\\"test2\\\"\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.username).to.equals(\"test2\");",
											"});",
											"",
											"pm.test(\"Phone is \\\"+3712312312\\\"\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.db_mobile_phone).to.equals(\"+3712312312\");",
											"});",
											"",
											"pm.test(\"Email is \\\"test@altipeak.com\\\"\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.db_email).to.equals(\"test@altipeak.com\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user2}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user2}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user - with name and lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"username is \\\"test3\\\"\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.username).to.equals(\"test3\");",
											"});",
											"",
											"pm.test(\"First name is \\\"name\\\"\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.first_name).to.equals(\"name\");",
											"});",
											"",
											"pm.test(\"Last name is \\\"lastname\\\"\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.last_name).to.equals(\"lastname\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user3}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user3}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user - user not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"username not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.eqls(\"Not found\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{notExists}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{notExists}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user - invalid auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.eql(\"Invalid token\");",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "fed8aa0a16f056311643122b4e73f7ce37633b12",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user - without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing Authentication Token.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.eql(\"Authentication credentials were not provided.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user settings - on",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"allow_password_for_registration\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password_for_registration).to.equals(true);",
											"});",
											"",
											"pm.test(\"allow_password\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password).to.equals(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "on",
											"type": "text"
										},
										{
											"key": "allow_password_for_registration",
											"value": "on",
											"type": "text"
										},
										{
											"key": "backuptoken_gateways",
											"value": "off",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "virtual_device_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user2}}/settings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user2}}",
										"settings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user settings - off",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"allow_password_for_registration\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password_for_registration).to.equals(false);",
											"});",
											"",
											"pm.test(\"allow_password\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password).to.equals(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "off",
											"type": "text"
										},
										{
											"key": "allow_password_for_registration",
											"value": "off",
											"type": "text"
										},
										{
											"key": "backuptoken_gateways",
											"value": "off",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "virtual_device_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user2}}/settings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user2}}",
										"settings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user settings - true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"allow_password_for_registration\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password_for_registration).to.equals(true);",
											"});",
											"",
											"pm.test(\"allow_password\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password).to.equals(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "true",
											"type": "text"
										},
										{
											"key": "allow_password_for_registration",
											"value": "true",
											"type": "text"
										},
										{
											"key": "backuptoken_gateways",
											"value": "off",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "virtual_device_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user2}}/settings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user2}}",
										"settings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user settings - false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"allow_password_for_registration\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password_for_registration).to.equals(false);",
											"});",
											"",
											"pm.test(\"allow_password\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password).to.equals(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "false",
											"type": "text"
										},
										{
											"key": "allow_password_for_registration",
											"value": "false",
											"type": "text"
										},
										{
											"key": "backuptoken_gateways",
											"value": "off",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "virtual_device_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user2}}/settings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user2}}",
										"settings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user settings - t",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"allow_password_for_registration\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password_for_registration).to.equals(true);",
											"});",
											"",
											"pm.test(\"allow_password\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password).to.equals(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "t",
											"type": "text"
										},
										{
											"key": "allow_password_for_registration",
											"value": "t",
											"type": "text"
										},
										{
											"key": "backuptoken_gateways",
											"value": "off",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "virtual_device_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user2}}/settings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user2}}",
										"settings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user settings - f",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"allow_password_for_registration\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password_for_registration).to.equals(false);",
											"});",
											"",
											"pm.test(\"allow_password\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password).to.equals(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "f",
											"type": "text"
										},
										{
											"key": "allow_password_for_registration",
											"value": "f",
											"type": "text"
										},
										{
											"key": "backuptoken_gateways",
											"value": "off",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "virtual_device_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user2}}/settings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user2}}",
										"settings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user settings - True",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"allow_password_for_registration\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password_for_registration).to.equals(true);",
											"});",
											"",
											"pm.test(\"allow_password\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password).to.equals(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "True",
											"type": "text"
										},
										{
											"key": "allow_password_for_registration",
											"value": "True",
											"type": "text"
										},
										{
											"key": "backuptoken_gateways",
											"value": "off",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "virtual_device_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user2}}/settings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user2}}",
										"settings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user settings - False",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"allow_password_for_registration\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password_for_registration).to.equals(false);",
											"});",
											"",
											"pm.test(\"allow_password\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password).to.equals(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "False",
											"type": "text"
										},
										{
											"key": "allow_password_for_registration",
											"value": "False",
											"type": "text"
										},
										{
											"key": "backuptoken_gateways",
											"value": "off",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "virtual_device_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user2}}/settings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user2}}",
										"settings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user settings - 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"allow_password_for_registration\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password_for_registration).to.equals(true);",
											"});",
											"",
											"pm.test(\"allow_password\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password).to.equals(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "1",
											"type": "text"
										},
										{
											"key": "allow_password_for_registration",
											"value": "1",
											"type": "text"
										},
										{
											"key": "backuptoken_gateways",
											"value": "off",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "virtual_device_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user2}}/settings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user2}}",
										"settings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user settings - 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"allow_password_for_registration\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password_for_registration).to.equals(false);",
											"});",
											"",
											"pm.test(\"allow_password\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password).to.equals(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "0",
											"type": "text"
										},
										{
											"key": "allow_password_for_registration",
											"value": "0",
											"type": "text"
										},
										{
											"key": "backuptoken_gateways",
											"value": "off",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "virtual_device_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user2}}/settings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user2}}",
										"settings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user settings - virtual_device_gateways",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"virtual_device_gateways\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.virtual_device_gateways).to.not.null;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "on",
											"type": "text",
											"disabled": true
										},
										{
											"key": "allow_password_for_registration",
											"value": "off",
											"type": "text",
											"disabled": true
										},
										{
											"key": "backuptoken_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "virtual_device_gateways",
											"value": "{\"gateways\":[]}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user2}}/settings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user2}}",
										"settings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user settings - user doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"User not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error_code).to.equal(\"USER_NOT_FOUND\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "on",
											"type": "text",
											"disabled": true
										},
										{
											"key": "allow_password_for_registration",
											"value": "off",
											"type": "text",
											"disabled": true
										},
										{
											"key": "backuptoken_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "virtual_device_gateways",
											"value": "{\"gateways\":[]}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{notExists}}/settings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{notExists}}",
										"settings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user settings - invalid use",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"allow_password\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password[0]).to.contain(\"Invalid Value.\");",
											"});",
											"",
											"pm.test(\"allow_password_for_registration\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password_for_registration[0]).to.contain(\"Invalid Value.\");",
											"});",
											"",
											"",
											"// \"[\\\"Invalid Value. Use : 'on','true','t','True','1',True,1,'off','false','f','False','0',False,0,None,''\\\"]\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "2",
											"type": "text"
										},
										{
											"key": "allow_password_for_registration",
											"value": "T",
											"type": "text"
										},
										{
											"key": "backuptoken_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "virtual_device_gateways",
											"value": "{\"gateways\":[]}",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user2}}/settings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user2}}",
										"settings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user settings - invalid configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"virtual_device_gateways\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.virtual_device_gateways).to.contain(\"Invalid Configuration\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "2",
											"type": "text",
											"disabled": true
										},
										{
											"key": "allow_password_for_registration",
											"value": "T",
											"type": "text",
											"disabled": true
										},
										{
											"key": "backuptoken_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "virtual_device_gateways",
											"value": "4",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user2}}/settings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user2}}",
										"settings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user settings - invalid auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.contain(\"Invalid token\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "fed8aa0s16f056311643122b4e73f7ce37633b19",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "2",
											"type": "text",
											"disabled": true
										},
										{
											"key": "allow_password_for_registration",
											"value": "T",
											"type": "text",
											"disabled": true
										},
										{
											"key": "backuptoken_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "virtual_device_gateways",
											"value": "4",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user2}}/settings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user2}}",
										"settings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user settings - withouth auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.contain(\"Authentication credentials were not provided.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "2",
											"type": "text",
											"disabled": true
										},
										{
											"key": "allow_password_for_registration",
											"value": "T",
											"type": "text",
											"disabled": true
										},
										{
											"key": "backuptoken_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "virtual_device_gateways",
											"value": "4",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user2}}/settings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user2}}",
										"settings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user settings - default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"allow_password default\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password).to.equals(null);",
											"});",
											"",
											"pm.test(\"allow_password_for_registration default\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password_for_registration).to.equals(null);",
											"});",
											"",
											"pm.test(\"virtual_device_gateways default\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.virtual_device_gateways).to.equals(null);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "ataboada@gmail.com",
											"type": "text",
											"disabled": true
										},
										{
											"key": "mobile_phone",
											"value": "541156102886",
											"type": "text",
											"disabled": true
										},
										{
											"key": "username",
											"value": "test",
											"type": "text",
											"disabled": true
										},
										{
											"key": "password",
											"value": "test",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/settings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"settings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user settings - not default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"allow_password \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password).to.equals(false);",
											"});",
											"",
											"pm.test(\"allow_password_for_registration \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password_for_registration).to.equals(false);",
											"});",
											"",
											"pm.test(\"virtual_device_gateways\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.virtual_device_gateways).to.not.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "ataboada@gmail.com",
											"type": "text",
											"disabled": true
										},
										{
											"key": "mobile_phone",
											"value": "541156102886",
											"type": "text",
											"disabled": true
										},
										{
											"key": "username",
											"value": "test",
											"type": "text",
											"disabled": true
										},
										{
											"key": "password",
											"value": "test",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user2}}/settings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user2}}",
										"settings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user settings - user doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"User not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error_code).to.equal(\"USER_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "ataboada@gmail.com",
											"type": "text",
											"disabled": true
										},
										{
											"key": "mobile_phone",
											"value": "541156102886",
											"type": "text",
											"disabled": true
										},
										{
											"key": "username",
											"value": "test",
											"type": "text",
											"disabled": true
										},
										{
											"key": "password",
											"value": "test",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{notExists}}/settings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{notExists}}",
										"settings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user settings - invalid auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.contain(\"Invalid token\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "fed8aa0a16fd56311643122b4e73f7ce37633b19",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "ataboada@gmail.com",
											"type": "text",
											"disabled": true
										},
										{
											"key": "mobile_phone",
											"value": "541156102886",
											"type": "text",
											"disabled": true
										},
										{
											"key": "username",
											"value": "test",
											"type": "text",
											"disabled": true
										},
										{
											"key": "password",
											"value": "test",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/settings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"settings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user settings - withouth auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.contain(\"Authentication credentials were not provided.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "2",
											"type": "text",
											"disabled": true
										},
										{
											"key": "allow_password_for_registration",
											"value": "T",
											"type": "text",
											"disabled": true
										},
										{
											"key": "backuptoken_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "virtual_device_gateways",
											"value": "4",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/settings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"settings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "List internal users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Count is 4\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.count).to.equals(4);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/userlist/?page=1&page_size=100",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"userlist",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "test",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "page_size",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List internal - size lower than the  amount of users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// var domain = pm.variables.get(\"domain\");",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"// pm.test(\"Next page\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.next).to.equals(\"https://\"+domain+\"/api/v1/admin/userlist/?page=3&page_size=1\");",
											"// });",
											"",
											"// pm.test(\"Previous page\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.previous).to.equals(\"https://\"+domain+\"/api/v1/admin/userlist/?page=1&page_size=1\");",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/userlist/?page=2&page_size=1",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"userlist",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "test",
											"disabled": true
										},
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "page_size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List internal users - page in negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"pm.test(\"Page is negative\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.eql(\"Not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "page",
											"value": "-4",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/userlist/?q=test&page=-1&page_size=100",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"userlist",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "test"
										},
										{
											"key": "page",
											"value": "-1"
										},
										{
											"key": "page_size",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List internal users - filter \"test2\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Count is 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.count).to.equals(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "q",
											"value": "test2",
											"type": "text"
										},
										{
											"key": "page",
											"value": "1",
											"type": "text"
										},
										{
											"key": "page_size",
											"value": "100",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/userlist/?q=test2&page=1&page_size=100",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"userlist",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "test2"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "page_size",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List internal users - invalid auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equals(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "fed8aa0a16f056311643122b4e73f7ce37633b18",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/userlist/?page=1&page_size=100",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"userlist",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "test",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "page_size",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List internal users - withouth auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equals(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/userlist/?page=1&page_size=100",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"userlist",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "test",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "page_size",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user \"test\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "timoteo.beltran@altipeak.com",
											"type": "text"
										},
										{
											"key": "mobile_phone",
											"value": "+3700000000",
											"type": "text"
										},
										{
											"key": "additional_information",
											"value": "{\"custom_info\": \"write whatever you want\"}",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "Lastname2",
											"type": "text"
										},
										{
											"key": "first_name",
											"value": "firstname2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{test-tenant-user}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{test-tenant-user}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user \"test\" - wrong email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid email adress\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.email).to.contains(\"Enter a valid email address.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "asd1",
											"type": "text"
										},
										{
											"key": "mobile_phone",
											"value": "+3700000000",
											"type": "text"
										},
										{
											"key": "additional_information",
											"value": "{\"custom_info\": \"write whatever you want\"}",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "Lastname2",
											"type": "text"
										},
										{
											"key": "first_name",
											"value": "firstname2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{test-tenant-user}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{test-tenant-user}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user \"test\" - wrong phone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid phone\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.mobile_phone).to.contains(\"Please enter a valid phone number\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "other@altipeak.com",
											"type": "text",
											"disabled": true
										},
										{
											"key": "mobile_phone",
											"value": "strtdhjgd",
											"type": "text"
										},
										{
											"key": "additional_information",
											"value": "{\"custom_info\": \"write whatever you want\"}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "last_name",
											"value": "Lastname2",
											"type": "text",
											"disabled": true
										},
										{
											"key": "first_name",
											"value": "firstname2",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{test-tenant-user}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{test-tenant-user}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user \"test\" - user doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Invalid phone\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.contains(\"Not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "other@altipeak.com",
											"type": "text"
										},
										{
											"key": "mobile_phone",
											"value": "+3700000000",
											"type": "text"
										},
										{
											"key": "additional_information",
											"value": "{\"custom_info\": \"write whatever you want\"}",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "Lastname2",
											"type": "text"
										},
										{
											"key": "first_name",
											"value": "firstname2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{notExists}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{notExists}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user \"test\" - invalid auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equals(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "fed8aa0a16f056311643122b4373f7ce37633b12",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "other@altipeak.com",
											"type": "text"
										},
										{
											"key": "mobile_phone",
											"value": "+3700000000",
											"type": "text"
										},
										{
											"key": "additional_information",
											"value": "{\"custom_info\": \"write whatever you want\"}",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "Lastname2",
											"type": "text"
										},
										{
											"key": "first_name",
											"value": "firstname2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{userNotExist}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{userNotExist}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user \"test\" - without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Authentication credentials were not provided\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equals(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "other@altipeak.com",
											"type": "text"
										},
										{
											"key": "mobile_phone",
											"value": "+3700000000",
											"type": "text"
										},
										{
											"key": "additional_information",
											"value": "{\"custom_info\": \"write whatever you want\"}",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "Lastname2",
											"type": "text"
										},
										{
											"key": "first_name",
											"value": "firstname2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{userNotExist}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{userNotExist}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user - user doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"User not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.contain(\"Not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "ataboada@gmail.com",
											"type": "text"
										},
										{
											"key": "mobile_phone",
											"value": "541156102886",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{notExists}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{notExists}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user - invalid auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equals(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "fed8aa0a16f056311643122b4e73f7ce37633b1s",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "ataboada@gmail.com",
											"type": "text"
										},
										{
											"key": "mobile_phone",
											"value": "541156102886",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{userNotExists}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{userNotExists}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user - withouth auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Authentication credentials were not provided\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equals(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "ataboada@gmail.com",
											"type": "text"
										},
										{
											"key": "mobile_phone",
											"value": "541156102886",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{userNotExists}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{userNotExists}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Associations",
					"item": [
						{
							"name": "Assign Fast:Auth device to user \"test\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Succes\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.contains(\"SUCCES\");",
											"});",
											"",
											"",
											"pm.test(\"Get Fast:Auth SN\", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData)",
											"    pm.expect(jsonData['serial_number'])!=null;",
											"    pm.collectionVariables.set(\"fast-auth-sn\", jsonData['serial_number']);",
											"    pm.collectionVariables.set(\"fast-auth-instance-id\", jsonData['association_instance_id']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "device_type",
											"value": "Fast:Auth:Mobile:Asymmetric",
											"type": "text"
										},
										{
											"key": "send_registration_code",
											"value": "false",
											"type": "text"
										},
										{
											"key": "send_download_links",
											"value": "false",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Fast:Auth device to user - send ON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Missing password\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.contains(\"SUCCES\");",
											"});",
											"",
											"pm.test(\"Didnt fail to send registration code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.fail_to_send_registration_code).to.equal(false);",
											"});",
											"",
											"pm.test(\"Didnt fail to send download links\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.fail_to_send_download_links).to.equal(false);",
											"});",
											"",
											"",
											"pm.test(\"Get Fast:Auth SN\", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData)",
											"    pm.expect(jsonData['serial_number'])!=null;",
											"    pm.collectionVariables.set(\"fast-auth-sn\", jsonData['serial_number']);",
											"    pm.collectionVariables.set(\"fast-auth-instance-id-second\", jsonData['association_instance_id']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "device_type",
											"value": "Fast:Auth:Mobile:Asymmetric",
											"type": "text"
										},
										{
											"key": "send_registration_code",
											"value": "on",
											"type": "text"
										},
										{
											"key": "send_download_links",
											"value": "True",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Fast:Auth device to user - without email, send ON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Missing password\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.contains(\"SUCCES\");",
											"});",
											"",
											"pm.test(\"Did fail to send registration code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.fail_to_send_registration_code).to.equal(true);",
											"});",
											"",
											"pm.test(\"Did fail to send download links\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.fail_to_send_download_links).to.equal(true);",
											"});",
											"",
											"/*",
											"pm.test(\"Get Fast:Auth SN\", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData)",
											"    pm.expect(jsonData['serial_number'])!=null;",
											"    pm.collectionVariables.set(\"fast-auth-sn\", jsonData['serial_number']);",
											"    pm.collectionVariables.set(\"fast-auth-instance-id\", jsonData['association_instance_id']);",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "device_type",
											"value": "Fast:Auth:Mobile:Asymmetric",
											"type": "text"
										},
										{
											"key": "send_registration_code",
											"value": "true",
											"type": "text"
										},
										{
											"key": "send_download_links",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user3}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user3}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Fast:Auth device to user - wrong parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.send_registration_code[0]).to.contains(\"Invalid Value. Use : 'on','true','t','True','1',True,1,'off','false','f','False','0',False,0,None,''\");",
											"});",
											"",
											"pm.test(\"Invalid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.send_download_links[0]).to.contains(\"Invalid Value. Use : 'on','true','t','True','1',True,1,'off','false','f','False','0',False,0,None,''\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "device_type",
											"value": "Fast:Auth:Mobile:Asymmetric",
											"type": "text"
										},
										{
											"key": "send_registration_code",
											"value": "ON",
											"type": "text"
										},
										{
											"key": "send_download_links",
											"value": "T",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Fast:Auth device to user - user doestn exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Invalid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"USER_NOT_FOUND\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "device_type",
											"value": "Fast:Auth:Mobile:Asymmetric",
											"type": "text"
										},
										{
											"key": "send_registration_code",
											"value": "false",
											"type": "text"
										},
										{
											"key": "send_download_links",
											"value": "false",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{notExists}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{notExists}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Fast:Auth device to user - user invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "device_type",
											"value": "Fast:Auth:Mobile:Asymmetric",
											"type": "text"
										},
										{
											"key": "send_registration_code",
											"value": "false",
											"type": "text"
										},
										{
											"key": "send_download_links",
											"value": "false",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{userInvalid}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{userInvalid}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Fast:Auth device to user - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasd",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "device_type",
											"value": "Fast:Auth:Mobile:Asymmetric",
											"type": "text"
										},
										{
											"key": "send_registration_code",
											"value": "false",
											"type": "text"
										},
										{
											"key": "send_download_links",
											"value": "false",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Fast:Auth device to user -  without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "device_type",
											"value": "Fast:Auth:Mobile:Asymmetric",
											"type": "text"
										},
										{
											"key": "send_registration_code",
											"value": "false",
											"type": "text"
										},
										{
											"key": "send_download_links",
											"value": "false",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign TOTP device to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Succes\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.contains(\"SUCCES\");",
											"});",
											"",
											"pm.test(\"Get Fast:Auth SN\", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData)",
											"    pm.expect(jsonData['serial_number'])!=null;",
											"    pm.collectionVariables.set(\"totp-auth-sn\", jsonData['serial_number']);",
											"    pm.collectionVariables.set(\"totp-auth-instance-id\", jsonData['association_instance_id']);",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "device_type",
											"value": "TOTP:Mobile",
											"type": "text"
										},
										{
											"key": "send_registration_code",
											"value": "false",
											"type": "text"
										},
										{
											"key": "send_download_links",
											"value": "false",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Virtual device to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Succes\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.contains(\"SUCCES\");",
											"});",
											"",
											"pm.test(\"Get Fast:Auth SN\", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData)",
											"    pm.expect(jsonData['serial_number'])!=null;",
											"    pm.collectionVariables.set(\"virtual-auth-sn\", jsonData['serial_number']);",
											"    pm.collectionVariables.set(\"virtual-instance-id\", jsonData['association_instance_id']);",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "device_type",
											"value": "Virtual",
											"type": "text"
										},
										{
											"key": "send_registration_code",
											"value": "false",
											"type": "text"
										},
										{
											"key": "send_download_links",
											"value": "false",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{test-tenant-user}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{test-tenant-user}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Virtual View OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"otp exists \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.otp).to.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "DISABLED",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/devices/Virtual/{{virtual-auth-sn}}/{{virtual-instance-id}}/code/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"devices",
										"Virtual",
										"{{virtual-auth-sn}}",
										"{{virtual-instance-id}}",
										"code",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Virtual View OTP - not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "DISABLED",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/devices/Virtual/0000000/111111/code/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"devices",
										"Virtual",
										"0000000",
										"111111",
										"code",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Virtual View OTP - wrong parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "DISABLED",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/devices/Virtual/!\"·$$/111111/code/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"devices",
										"Virtual",
										"!\"·$$",
										"111111",
										"code",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Virtual View OTP - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasdasd",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "DISABLED",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/devices/Virtual/{{virtual-auth-sn}}/{{virtual-instance-id}}/code/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"devices",
										"Virtual",
										"{{virtual-auth-sn}}",
										"{{virtual-instance-id}}",
										"code",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Virtual View OTP - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "DISABLED",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/devices/Virtual/{{virtual-auth-sn}}/{{virtual-instance-id}}/code/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"devices",
										"Virtual",
										"{{virtual-auth-sn}}",
										"{{virtual-instance-id}}",
										"code",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Virtual Send OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Delivered\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].gateway).to.equal(pm.environment.get(\"msg-name\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "DISABLED",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/devices/Virtual/{{virtual-auth-sn}}/{{virtual-instance-id}}/code/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"devices",
										"Virtual",
										"{{virtual-auth-sn}}",
										"{{virtual-instance-id}}",
										"code",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user \"test\" - without email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "",
											"type": "text"
										},
										{
											"key": "mobile_phone",
											"value": "+3700000000",
											"type": "text"
										},
										{
											"key": "additional_information",
											"value": "{\"custom_info\": \"write whatever you want\"}",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "Lastname2",
											"type": "text"
										},
										{
											"key": "first_name",
											"value": "firstname2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{test-tenant-user}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{test-tenant-user}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Virtual Send OTP - without email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Delivered\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"FAIL_TO_SEND_OTP\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "DISABLED",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/devices/Virtual/{{virtual-auth-sn}}/{{virtual-instance-id}}/code/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"devices",
										"Virtual",
										"{{virtual-auth-sn}}",
										"{{virtual-instance-id}}",
										"code",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Virtual Send OTP - not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Delivered\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"DEVICE_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "DISABLED",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/devices/Virtual/000000/1111111/code/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"devices",
										"Virtual",
										"000000",
										"1111111",
										"code",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Virtual Send OTP - wrong parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "DISABLED",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/devices/Virtual/|@#~/1111111/code/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"devices",
										"Virtual",
										"|@"
									],
									"hash": "~/1111111/code/"
								}
							},
							"response": []
						},
						{
							"name": "Virtual Send OTP - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasd",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "DISABLED",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/devices/Virtual/{{virtual-auth-sn}}/{{virtual-instance-id}}/code/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"devices",
										"Virtual",
										"{{virtual-auth-sn}}",
										"{{virtual-instance-id}}",
										"code",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Virtual Send OTP - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "DISABLED",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/devices/Virtual/{{virtual-auth-sn}}/{{virtual-instance-id}}/code/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"devices",
										"Virtual",
										"{{virtual-auth-sn}}",
										"{{virtual-instance-id}}",
										"code",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user associations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user associations - user does not exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"User not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.contains(\"USER_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{notExists}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{notExists}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user associations - invalid user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{userInvalid}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{userInvalid}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user associations - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasd",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user associations - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Change status - more than one divece found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"More than one device found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"MORE_THAN_ONE_DEVICE_FOUND\");",
											"    // pm.expect(jsonData.code).to.equal(\"DEVICE_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "DISABLED",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Fast:Auth:Mobile:Asymmetric/{{fast-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Fast:Auth:Mobile:Asymmetric",
										"{{fast-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign Fast:Auth device to user \"test\" Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Delete successfully\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"SUCCESS\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{test-tenant-user}}/devices/Fast:Auth:Mobile:Asymmetric/{{fast-auth-sn}}/{{fast-auth-instance-id-second}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{test-tenant-user}}",
										"devices",
										"Fast:Auth:Mobile:Asymmetric",
										"{{fast-auth-sn}}",
										"{{fast-auth-instance-id-second}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Change status - DISABLED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "DISABLED",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Fast:Auth:Mobile:Asymmetric/{{fast-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Fast:Auth:Mobile:Asymmetric",
										"{{fast-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Change status - LOST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "LOST",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Fast:Auth:Mobile:Asymmetric/{{fast-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Fast:Auth:Mobile:Asymmetric",
										"{{fast-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Change status - STOLEN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "STOLEN",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Fast:Auth:Mobile:Asymmetric/{{fast-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Fast:Auth:Mobile:Asymmetric",
										"{{fast-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Change status - SUSPENDED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "SUSPENDED",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Fast:Auth:Mobile:Asymmetric/{{fast-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Fast:Auth:Mobile:Asymmetric",
										"{{fast-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Change status - PENDING_REMOVAL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "PENDING_REMOVAL",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Fast:Auth:Mobile:Asymmetric/{{fast-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Fast:Auth:Mobile:Asymmetric",
										"{{fast-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Change status - ACTIVE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "ACTIVE",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Fast:Auth:Mobile:Asymmetric/{{fast-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Fast:Auth:Mobile:Asymmetric",
										"{{fast-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Change status - wrong status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Select valid choice\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status[0]).to.equal(\"Select a valid choice. asd is not one of the available choices.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "asd",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Fast:Auth:Mobile:Asymmetric/{{fast-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Fast:Auth:Mobile:Asymmetric",
										"{{fast-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Change status - device not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Select valid choice\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"DEVICE_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "ACTIVE",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Fast:Auth:Mobile:Asymmetric/000000000/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Fast:Auth:Mobile:Asymmetric",
										"000000000",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Change status - device not associated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Select valid choice\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"DEVICE_NOT_ASSOCIATED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "ACTIVE",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user2}}/devices/Fast:Auth:Mobile:Asymmetric/{{fast-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user2}}",
										"devices",
										"Fast:Auth:Mobile:Asymmetric",
										"{{fast-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Change status - user doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Select valid choice\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"USER_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "ACTIVE",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{notExists}}/devices/Fast:Auth:Mobile:Asymmetric/{{fast-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{notExists}}",
										"devices",
										"Fast:Auth:Mobile:Asymmetric",
										"{{fast-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Change status - invalid user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "ACTIVE",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{userInvalid}}/devices/Fast:Auth:Mobile:Asymmetric/{{fast-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{userInvalid}}",
										"devices",
										"Fast:Auth:Mobile:Asymmetric",
										"{{fast-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Change status - invalid fast auth sn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "ACTIVE",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Fast:Auth:Mobile:Asymmetric/{{userInvalid}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Fast:Auth:Mobile:Asymmetric",
										"{{userInvalid}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Change status - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasd",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "ACTIVE",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Fast:Auth:Mobile:Asymmetric/{{fast-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Fast:Auth:Mobile:Asymmetric",
										"{{fast-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Change status - without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "ACTIVE",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Fast:Auth:Mobile:Asymmetric/{{fast-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Fast:Auth:Mobile:Asymmetric",
										"{{fast-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "TOTP Association detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is active\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"ACTIVE\");",
											"});",
											"",
											"pm.test(\"Not confirmed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.confirmed).to.equal(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "DISABLED",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{test-tenant-user}}/devices/TOTP:Mobile/{{totp-auth-sn}}/{{totp-auth-instance-id}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{test-tenant-user}}",
										"devices",
										"TOTP:Mobile",
										"{{totp-auth-sn}}",
										"{{totp-auth-instance-id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "TOTP Association detail - device not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"DEVICE_NOT_FOUND\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"DEVICE_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "DISABLED",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/TOTP:Mobile/{{totp-auth-sn}}/000000/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"TOTP:Mobile",
										"{{totp-auth-sn}}",
										"000000",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "TOTP Association detail - device not associated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"DEVICE_NOT_ASSOCIATED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "DISABLED",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user2}}/devices/TOTP:Mobile/{{totp-auth-sn}}/{{totp-auth-instance-id}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user2}}",
										"devices",
										"TOTP:Mobile",
										"{{totp-auth-sn}}",
										"{{totp-auth-instance-id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Fast Auth Association detail - user doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Select valid choice\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"USER_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "DISABLED",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{notExists}}/devices/TOTP:Mobile/{{fast-auth-sn}}/{{fast-auth-instance-id}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{notExists}}",
										"devices",
										"TOTP:Mobile",
										"{{fast-auth-sn}}",
										"{{fast-auth-instance-id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Fast Auth Association detail - invalid user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "DISABLED",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{userInvalid}}/devices/TOTP:Mobile/{{fast-auth-sn}}/{{fast-auth-instance-id}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{userInvalid}}",
										"devices",
										"TOTP:Mobile",
										"{{fast-auth-sn}}",
										"{{fast-auth-instance-id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Fast Auth Association detail -  invalid fast auth sn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "DISABLED",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/TOTP:Mobile/{{userInvalid}}/{{fast-auth-instance-id}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"TOTP:Mobile",
										"{{userInvalid}}",
										"{{fast-auth-instance-id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Fast Auth Association detail - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasd",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "DISABLED",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/TOTP:Mobile/{{totp-auth-sn}}/{{totp-auth-instance-id}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"TOTP:Mobile",
										"{{totp-auth-sn}}",
										"{{totp-auth-instance-id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Fast Auth Association detail - without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "DISABLED",
											"description": "DISABLED | ACTIVE | LOST | STOLEN | SUSPENDED | PENDING_REMOVAL",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/TOTP:Mobile/{{totp-auth-sn}}/{{totp-auth-instance-id}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"TOTP:Mobile",
										"{{totp-auth-sn}}",
										"{{totp-auth-instance-id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign Fast:Auth device to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Successfully removed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"SUCCESS\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{test-tenant-user}}/devices/Fast:Auth:Mobile:Asymmetric/{{fast-auth-sn}}/{{fast-auth-instance-id}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{test-tenant-user}}",
										"devices",
										"Fast:Auth:Mobile:Asymmetric",
										"{{fast-auth-sn}}",
										"{{fast-auth-instance-id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign Fast:Auth device to user - device not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"DEVICE_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{test-tenant-user}}/devices/Fast:Auth:Mobile:Asymmetric/{{fast-auth-sn}}/{{fast-auth-instance-id}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{test-tenant-user}}",
										"devices",
										"Fast:Auth:Mobile:Asymmetric",
										"{{fast-auth-sn}}",
										"{{fast-auth-instance-id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign Fast:Auth device to user - user not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"USER_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{notExists}}/devices/Fast:Auth:Mobile:Asymmetric/{{fast-auth-sn}}/{{fast-auth-instance-id}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{notExists}}",
										"devices",
										"Fast:Auth:Mobile:Asymmetric",
										"{{fast-auth-sn}}",
										"{{fast-auth-instance-id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign Fast:Auth device to user - invalid user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{userInvalid}}/devices/Fast:Auth:Mobile:Asymmetric/{{fast-auth-sn}}/{{fast-auth-instance-id}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{userInvalid}}",
										"devices",
										"Fast:Auth:Mobile:Asymmetric",
										"{{fast-auth-sn}}",
										"{{fast-auth-instance-id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign Fast:Auth device to user - invalid fast-auth-sn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Fast:Auth:Mobile:Asymmetric/{{userInvalid}}/{{fast-auth-instance-id}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Fast:Auth:Mobile:Asymmetric",
										"{{userInvalid}}",
										"{{fast-auth-instance-id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign Fast:Auth device to user - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasd",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Fast:Auth:Mobile:Asymmetric/{{fast-auth-sn}}/{{fast-auth-instance-id}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Fast:Auth:Mobile:Asymmetric",
										"{{fast-auth-sn}}",
										"{{fast-auth-instance-id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign Fast:Auth device to user - withouth auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Fast:Auth:Mobile:Asymmetric/{{fast-auth-sn}}/{{fast-auth-instance-id}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Fast:Auth:Mobile:Asymmetric",
										"{{fast-auth-sn}}",
										"{{fast-auth-instance-id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign TOTP device to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Successfully removed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"SUCCESS\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{test-tenant-user}}/devices/TOTP:Mobile/{{totp-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{test-tenant-user}}",
										"devices",
										"TOTP:Mobile",
										"{{totp-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign TOTP device to user - device not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"DEVICE_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{test-tenant-user}}/devices/TOTP:Mobile/{{totp-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{test-tenant-user}}",
										"devices",
										"TOTP:Mobile",
										"{{totp-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign TOTP device to user - user not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"USER_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{notExists}}/devices/TOTP:Mobile/{{totp-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{notExists}}",
										"devices",
										"TOTP:Mobile",
										"{{totp-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign TOTP device to user - invalid user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{userInvalid}}/devices/TOTP:Mobile/{{totp-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{userInvalid}}",
										"devices",
										"TOTP:Mobile",
										"{{totp-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign TOTP device to user - invalid totp-auth-sn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/TOTP:Mobile/{{userInvalid}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"TOTP:Mobile",
										"{{userInvalid}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign TOTP device to user - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasd",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/TOTP:Mobile/{{totp-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"TOTP:Mobile",
										"{{totp-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign TOTP device to user - without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/TOTP:Mobile/{{totp-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"TOTP:Mobile",
										"{{totp-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign VIRTUAL device to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Successfully removed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"SUCCESS\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{test-tenant-user}}/devices/Virtual/{{virtual-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{test-tenant-user}}",
										"devices",
										"Virtual",
										"{{virtual-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign VIRTUAL device to user - device not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"DEVICE_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{test-tenant-user}}/devices/Virtual/{{virtual-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{test-tenant-user}}",
										"devices",
										"Virtual",
										"{{virtual-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign VIRTUAL device to user - user not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"USER_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{notExists}}/devices/Virtual/{{virtual-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{notExists}}",
										"devices",
										"Virtual",
										"{{virtual-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign VIRTUAL device to user - invalid user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{userInvalid}}/devices/Virtual/{{virtual-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{userInvalid}}",
										"devices",
										"Virtual",
										"{{virtual-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign VIRTUAL device to user - invalid virtual-auth-sn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Virtual/{{userInvalid}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Virtual",
										"{{userInvalid}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign VIRTUAL device to user - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasdasd",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Virtual/{{virtual-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Virtual",
										"{{virtual-auth-sn}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign VIRTUAL device to user - without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Virtual/{{virtual-auth-sn}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Virtual",
										"{{virtual-auth-sn}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Authentication",
					"item": [
						{
							"name": "Test RADIUS auth - access_denied",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"",
											"pm.test(\"ACCESS_DENIED\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"ACCESS_DENIED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{test-tenant-user}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"description": "password accepts all: static pass, backup token, totp, hotp, push, etc",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/radius_authenticate/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"radius_authenticate",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user settings - passwords on",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"allow_password_for_registration\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password_for_registration).to.equals(true);",
											"});",
											"",
											"pm.test(\"allow_password\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password).to.equals(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "on",
											"type": "text"
										},
										{
											"key": "allow_password_for_registration",
											"value": "on",
											"type": "text"
										},
										{
											"key": "backuptoken_gateways",
											"value": "off",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										},
										{
											"key": "virtual_device_gateways",
											"value": "null",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/settings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"settings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Test RADIUS auth -  password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"ACCESS_ALLOWED\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"ACCESS_ALLOWED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{test-tenant-user}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"description": "password accepts all: static pass, backup token, totp, hotp, push, etc",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/radius_authenticate/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"radius_authenticate",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate user password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"ACCESS_ALLOWED\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"ACCESS_ALLOWED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tenant-authentication-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{test-tenant-user}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/auth/authenticate/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"auth",
										"authenticate",
										""
									],
									"query": [
										{
											"key": "force_device_by_sn_instance_id",
											"value": "Fast:Auth:Mobile:Asymmetric_0002000342951[b07375030c]asdasdasd",
											"disabled": true
										},
										{
											"key": "force_device_type",
											"value": "[\"TOTP:Mobile\"]",
											"disabled": true
										},
										{
											"key": "exclude_device_type",
											"value": "[\"Fast:Auth:Mobile:Asymmetric\"]",
											"disabled": true
										},
										{
											"key": "test",
											"value": "True",
											"disabled": true
										},
										{
											"key": "apply_push_async",
											"value": "True",
											"disabled": true
										},
										{
											"key": "exclude_device_type",
											"value": "[\"Virtual\"]",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Group",
					"item": [
						{
							"name": "Create Group  (ONLY MT)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Name is Group Test\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.eql(environment[\"group\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{group}}",
											"type": "text"
										},
										{
											"key": "",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Group  (ONLY MT) - already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Already exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name[0]).to.eql(\"Group with this Name already exists.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{group}}",
											"type": "text"
										},
										{
											"key": "",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Group  (ONLY MT) - Invalid name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Enter a valid group name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name[0]).to.eql(\"Please enter a valid group name\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{userInvalid}}",
											"type": "text"
										},
										{
											"key": "",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Group  (ONLY MT) - invalid auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equals(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasd",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{userInvalid}}",
											"type": "text"
										},
										{
											"key": "",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Group  (ONLY MT) - withouth auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Authentication credentials were not provided\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equals(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{userInvalid}}",
											"type": "text"
										},
										{
											"key": "",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Group Details  (ONLY MT)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Name is Group Test\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(environment[\"group\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Group Details  (ONLY MT) - group doesnt exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Group not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{notExists}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{notExists}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Group Details  (ONLY MT) - invalid name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{userInvalid}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{userInvalid}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Group Details  (ONLY MT) - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asddd",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{notExists}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{notExists}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Group Details  (ONLY MT) - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Authentication credentials were not provided\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{notExists}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{notExists}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Modify group settings  (ONLY MT) - True and False",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"allow_password true\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password).to.equal(true);",
											"});",
											"",
											"pm.test(\"allow_password_for_registration false\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password_for_registration).to.equal(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "True",
											"type": "text"
										},
										{
											"key": "allow_password_for_registration",
											"value": "False",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/groupsettings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"groupsettings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Modify group settings  (ONLY MT) - t and f",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"allow_password true\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password).to.equal(true);",
											"});",
											"",
											"pm.test(\"allow_password_for_registration false\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password_for_registration).to.equal(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "t",
											"type": "text"
										},
										{
											"key": "allow_password_for_registration",
											"value": "f",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/groupsettings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"groupsettings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Modify group settings  (ONLY MT) - 1 and 0 Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"allow_password true\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password).to.equal(true);",
											"});",
											"",
											"pm.test(\"allow_password_for_registration false\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password_for_registration).to.equal(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "1",
											"type": "text"
										},
										{
											"key": "allow_password_for_registration",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/groupsettings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"groupsettings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Modify group settings  (ONLY MT) - wrong value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Wrong value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password[0]).to.contains(\"value must be either None, True or False.\");",
											"});",
											"",
											"pm.test(\"Wrong value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password_for_registration[0]).to.contains(\"value must be either None, True or False.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "true",
											"type": "text"
										},
										{
											"key": "allow_password_for_registration",
											"value": "false",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/groupsettings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"groupsettings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Modify group settings  (ONLY MT) - group doestn exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Group not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Not found\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "t",
											"type": "text"
										},
										{
											"key": "allow_password_for_registration",
											"value": "f",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{notExists}}/groupsettings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{notExists}}",
										"groupsettings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Modify group settings  (ONLY MT) - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asd",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "t",
											"type": "text"
										},
										{
											"key": "allow_password_for_registration",
											"value": "f",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{notExists}}/groupsettings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{notExists}}",
										"groupsettings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Modify group settings  (ONLY MT) - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"No auth\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allow_password",
											"value": "t",
											"type": "text"
										},
										{
											"key": "allow_password_for_registration",
											"value": "f",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{notExists}}/groupsettings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{notExists}}",
										"groupsettings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Group settings detail  (ONLY MT)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"allow_password true\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password).to.equal(true);",
											"});",
											"",
											"pm.test(\"allow_password_for_registration false\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.allow_password_for_registration).to.equal(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Grupo Test",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/groupsettings/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"groupsettings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Group settings detail  (ONLY MT) - group doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Group not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Grupo Test",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{notExists}}/groupsettings",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{notExists}}",
										"groupsettings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Group settings detail  (ONLY MT) - invalid group name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Grupo Test",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{userInvalid}}/groupsettings",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{userInvalid}}",
										"groupsettings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Group settings detail  (ONLY MT) - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.contain(\"Invalid token\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasdas",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Grupo Test",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/groupsettings",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"groupsettings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Group settings detail  (ONLY MT) - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"",
											"pm.test(\"No auth\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.contain(\"Authentication credentials were not provided.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Grupo Test",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/groupsettings",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"groupsettings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Append user to a group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{user}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/member/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"member",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Append user to a group - user doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"User not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.username).to.contains(\"User not valid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{notExists}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/member/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"member",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Append user to a group - group doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"User not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error_code).to.equal(\"GROUP_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{user}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{notExists}}/member/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{notExists}}",
										"member",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Append user to a group - group invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{user}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{userInvalid}}/member/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{userInvalid}}",
										"member",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Append user to a group - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdddd",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{user}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/member/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"member",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Append user to a group -  without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"No auth\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{user}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/member/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"member",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Group is Group Test\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.default_group.name).to.equal(pm.environment.get(\"group\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/group/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"group",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user group - user doesnt belong to any group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"User doesnt have group\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.default_group).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user2}}/group/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user2}}",
										"group",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user group - user doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"User not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error_code).to.equal(\"USER_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{notExists}}/group/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{notExists}}",
										"group",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user group - invalid user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{userInvalid}}/group/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{userInvalid}}",
										"group",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user group - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asd",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/group/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"group",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user group -  without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/group/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"group",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove user from group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{user}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/member/{{user}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"member",
										"{{user}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove user from group - user doesnt belongs to group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error_code).to.equal(\"USER_NOT_MEMBER\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{user2}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/member/{{user2}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"member",
										"{{user2}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove user from group - group doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error_code).to.equal(\"GROUP_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{user}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{notExists}}/member/{{user}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{notExists}}",
										"member",
										"{{user}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove user from group - user doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error_code).to.equal(\"USER_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{notExists}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/member/{{notExists}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"member",
										"{{notExists}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove user from group - invalid user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{userInvalid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/member/{{userInvalid}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"member",
										"{{userInvalid}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove user from group - invalid group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{user}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{userInvalid}}/member/{{user}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{userInvalid}}",
										"member",
										"{{user}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove user from group - invalid group and user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "test",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{userInvalid}}/member/{{userInvalid}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{userInvalid}}",
										"member",
										"{{userInvalid}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove user from group - invalid group and user Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{userInvalid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{userInvalid}}/member/{{userInvalid}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{userInvalid}}",
										"member",
										"{{userInvalid}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove user from group - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asd",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{user}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/member/{{user}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"member",
										"{{user}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove user from group - withouth token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"No token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{user}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/member/{{user}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"member",
										"{{user}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Group  (ONLY MT) - group doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{notExists}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{notExists}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{notExists}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Group  (ONLY MT) -  invalid group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{notExists}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{userInvalid}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{userInvalid}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Group  (ONLY MT) - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asd",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{notExists}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{notExists}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{notExists}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Group  (ONLY MT) - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{notExists}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{notExists}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{notExists}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Enrollment",
					"item": [
						{
							"name": "Create registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Succes\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.contains(\"SUCCES\");",
											"});",
											"",
											"pm.test(\"Send false\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sent_by).is.null",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "send_registration_token",
											"value": "false",
											"description": "can be true and will send it after creating it",
											"type": "text"
										},
										{
											"key": "registration_token_timeout",
											"value": "10",
											"description": "minutes",
											"type": "text"
										},
										{
											"key": "registration_token_attempts",
											"value": "2",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create registration token - send token true  without email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Succes\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.contains(\"FAIL_TO_SEND_REGISTRATION_CODE\");",
											"});",
											"/*",
											"pm.test(\"Send false\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sent_by).equal(\"Message Gateway\");",
											"});*/",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "send_registration_token",
											"value": "true",
											"description": "can be true and will send it after creating it",
											"type": "text"
										},
										{
											"key": "registration_token_timeout",
											"value": "10",
											"description": "minutes",
											"type": "text"
										},
										{
											"key": "registration_token_attempts",
											"value": "2",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit user \"test\" - with email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "other@altipeak.com",
											"type": "text"
										},
										{
											"key": "mobile_phone",
											"value": "+3700000000",
											"type": "text"
										},
										{
											"key": "additional_information",
											"value": "{\"custom_info\": \"write whatever you want\"}",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "Lastname2",
											"type": "text"
										},
										{
											"key": "first_name",
											"value": "firstname2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{test-tenant-user}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{test-tenant-user}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create registration token - send token true  with mail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Succes\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.contains(\"SUCCESS\");",
											"});",
											"",
											"pm.test(\"Sent by Message Gateway\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sent_by).equal(pm.environment.get(\"msg-name\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "send_registration_token",
											"value": "true",
											"description": "can be true and will send it after creating it",
											"type": "text"
										},
										{
											"key": "registration_token_timeout",
											"value": "10",
											"description": "minutes",
											"type": "text"
										},
										{
											"key": "registration_token_attempts",
											"value": "2",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create registration token - send token string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid use\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.send_registration_token[0]).to.equal(\"Invalid Value. Use : 'on','true','t','True','1',True,1,'off','false','f','False','0',False,0,None,''\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "send_registration_token",
											"value": "asd",
											"description": "can be true and will send it after creating it",
											"type": "text"
										},
										{
											"key": "registration_token_timeout",
											"value": "10",
											"description": "minutes",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_attempts",
											"value": "2",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create registration token - attemps 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Succes\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.contains(\"SUCCES\");",
											"});",
											"",
											"pm.test(\"Send false\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.attempts_left).equal(2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "send_registration_token",
											"value": "true",
											"description": "can be true and will send it after creating it",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_timeout",
											"value": "10",
											"description": "minutes",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_attempts",
											"value": "2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create registration token - attemps -1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Succes\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.registration_token_attempts[0]).to.equal(\"Ensure this value is greater than or equal to 1.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "send_registration_token",
											"value": "true",
											"description": "can be true and will send it after creating it",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_timeout",
											"value": "asd",
											"description": "minutes",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_attempts",
											"value": "-1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create registration token - attemps string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Succes\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.registration_token_attempts[0]).to.equal(\"Enter a whole number.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "send_registration_token",
											"value": "true",
											"description": "can be true and will send it after creating it",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_timeout",
											"value": "asd",
											"description": "minutes",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_attempts",
											"value": "asdasd",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create registration token - timeout -1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Succes\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.registration_token_timeout[0]).to.equal(\"Ensure this value is greater than or equal to 5.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "send_registration_token",
											"value": "true",
											"description": "can be true and will send it after creating it",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_timeout",
											"value": "-1",
											"description": "minutes",
											"type": "text"
										},
										{
											"key": "registration_token_attempts",
											"value": "2",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create registration token - timeout string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Succes\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.registration_token_timeout[0]).to.equal(\"Enter a whole number.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "send_registration_token",
											"value": "true",
											"description": "can be true and will send it after creating it",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_timeout",
											"value": "asd",
											"description": "minutes",
											"type": "text"
										},
										{
											"key": "registration_token_attempts",
											"value": "2",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create registration token - user doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"USER_NOT_FOUND\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.contains(\"USER_NOT_FOUND\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "send_registration_token",
											"value": "false",
											"description": "can be true and will send it after creating it",
											"type": "text"
										},
										{
											"key": "registration_token_timeout",
											"value": "10",
											"description": "minutes",
											"type": "text"
										},
										{
											"key": "registration_token_attempts",
											"value": "2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{notExists}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{notExists}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create registration token - invalid user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "send_registration_token",
											"value": "false",
											"description": "can be true and will send it after creating it",
											"type": "text"
										},
										{
											"key": "registration_token_timeout",
											"value": "10",
											"description": "minutes",
											"type": "text"
										},
										{
											"key": "registration_token_attempts",
											"value": "2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{userInvalid}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{userInvalid}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create registration token - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.contains(\"Invalid token\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasd",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "send_registration_token",
											"value": "false",
											"description": "can be true and will send it after creating it",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_timeout",
											"value": "10",
											"description": "minutes",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_attempts",
											"value": "2",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create registration token - without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing auth\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.contains(\"Authentication credentials were not provided.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "send_registration_token",
											"value": "false",
											"description": "can be true and will send it after creating it",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_timeout",
											"value": "10",
											"description": "minutes",
											"type": "text",
											"disabled": true
										},
										{
											"key": "registration_token_attempts",
											"value": "2",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get registration token - user doestn have a registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user2}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user2}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get registration token - user doesnt exitst",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"USER_NOT_FOUND\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.contains(\"USER_NOT_FOUND\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{notExists}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{notExists}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get registration token - user invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{userInvalid}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{userInvalid}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get registration token - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.contains(\"Invalid token\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasd",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get registration token - without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing auth\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.contains(\"Authentication credentials were not provided.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get registration token Settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/settings/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"settings",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get registration token Settings - user doestn exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"USER_NOT_FOUND\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error_code).to.contains(\"USER_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{notExists}}/settings/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{notExists}}",
										"settings",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get registration token Settings - invalid user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{userInvalid}}/settings/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{userInvalid}}",
										"settings",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get registration token Settings - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.contains(\"Invalid token\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasd",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/settings/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"settings",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get registration token Settings - without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing auth\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.contains(\"Authentication credentials were not provided.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/settings/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"settings",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Send registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/registrationtoken/send/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"registrationtoken",
										"send",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Send registration token - user doesnts exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"USER_NOT_FOUND\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.contains(\"USER_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{notExists}}/registrationtoken/send/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{notExists}}",
										"registrationtoken",
										"send",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Send registration token - invalid user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{userInvalid}}/registrationtoken/send/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{userInvalid}}",
										"registrationtoken",
										"send",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Send registration token - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.contains(\"Invalid token\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasdasd",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/registrationtoken/send/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"registrationtoken",
										"send",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Send registration token - without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing auth\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.contains(\"Authentication credentials were not provided.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/registrationtoken/send/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"registrationtoken",
										"send",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete registration token - registration code not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.contains(\"REGISTRATION_CODE_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete registration token - user doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"USER_NOT_FOUND\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.contains(\"USER_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{notExists}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{notExists}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete registration token - invalid user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{userInvalid}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{userInvalid}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete registration token - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.contains(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasd",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{notExists}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{notExists}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete registration token - without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing auth\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.contains(\"Authentication credentials were not provided.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{notExists}}/registrationtoken/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{notExists}}",
										"registrationtoken",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "RADIUS",
					"item": [
						{
							"name": "Create RADIUSClient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"is not active\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.is_active).to.eql(false);",
											"});",
											"",
											"pm.test(\"name is test\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.eql(\"test\");",
											"});",
											"",
											"pm.test(\"secret is 12345\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.secret).to.eql(\"12345\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "test",
											"type": "text"
										},
										{
											"key": "address",
											"value": "192.168.1.7",
											"type": "text"
										},
										{
											"key": "secret",
											"value": "12345",
											"type": "text"
										},
										{
											"key": "forward_reply_items",
											"value": "true",
											"type": "text",
											"disabled": true
										},
										{
											"key": "gateway",
											"value": "null",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create RADIUSClient - already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Name already exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name[0]).to.eql(\"Radius client with this Name already exists.\");",
											"});",
											"",
											"pm.test(\"adress already exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.address[0]).to.eql(\"Radius client with this Address already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "test",
											"type": "text"
										},
										{
											"key": "address",
											"value": "192.168.1.7",
											"type": "text"
										},
										{
											"key": "secret",
											"value": "12345",
											"type": "text"
										},
										{
											"key": "forward_reply_items",
											"value": "true",
											"type": "text"
										},
										{
											"key": "gateway",
											"value": "null",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create RADIUSClient - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdda",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{user}}",
											"type": "text"
										},
										{
											"key": "address",
											"value": "192.168.1.7",
											"type": "text"
										},
										{
											"key": "secret",
											"value": "12345",
											"type": "text"
										},
										{
											"key": "forward_reply_items",
											"value": "true",
											"type": "text"
										},
										{
											"key": "gateway",
											"value": "null",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create RADIUSClient - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{user}}",
											"type": "text"
										},
										{
											"key": "address",
											"value": "192.168.1.7",
											"type": "text"
										},
										{
											"key": "secret",
											"value": "12345",
											"type": "text"
										},
										{
											"key": "forward_reply_items",
											"value": "true",
											"type": "text"
										},
										{
											"key": "gateway",
											"value": "null",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "List radius client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Count is 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.count).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "List radius client - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasd",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "List radius client - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get RADIUSClient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Name is test\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(\"test\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get RADIUSClient - user not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"User not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test2/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test2",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get RADIUSClient - invalid user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/{{userInvalid}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"{{userInvalid}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get RADIUSClient - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasd",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get RADIUSClient -without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit RADIUSClient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is active \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.is_active).to.equal(true);",
											"});",
											"",
											"pm.test(\"Change secret \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.secret).to.equal(\"54321\");",
											"});",
											"",
											"pm.test(\"Foward reply items true \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.forward_reply_items).to.equal(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "forward_reply_items",
											"value": "true",
											"type": "text"
										},
										{
											"key": "is_active",
											"value": "1",
											"type": "text"
										},
										{
											"key": "secret",
											"value": "54321",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit RADIUSClient 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is active \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.is_active).to.equal(false);",
											"});",
											"",
											"pm.test(\"Change secret \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.secret).to.equal(\"12345\");",
											"});",
											"",
											"pm.test(\"Foward reply items false \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.forward_reply_items).to.equal(false);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "forward_reply_items",
											"value": "f",
											"type": "text"
										},
										{
											"key": "is_active",
											"value": "0",
											"type": "text"
										},
										{
											"key": "secret",
											"value": "12345",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit RADIUSClient - radius client doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Radius client does not exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Not found\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "forward_reply_items",
											"value": "false",
											"type": "text"
										},
										{
											"key": "is_active",
											"value": "false",
											"type": "text"
										},
										{
											"key": "secret",
											"value": "12345",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test2/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test2",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit RADIUSClient - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasd",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "forward_reply_items",
											"value": "false",
											"type": "text"
										},
										{
											"key": "is_active",
											"value": "false",
											"type": "text"
										},
										{
											"key": "secret",
											"value": "12345",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit RADIUSClient - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "forward_reply_items",
											"value": "false",
											"type": "text"
										},
										{
											"key": "is_active",
											"value": "false",
											"type": "text"
										},
										{
											"key": "secret",
											"value": "12345",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create GroupMapping - forward reply items off",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Group is Users\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.radius_client[0]).to.equal(\"'Forward reply items' must be checked in radius client\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"Users\",\n    \"field_mapping\": {\"username\":\"%(username)s\", \"group\":\"%(group)s\", \"first_name\":\"%(first_name)s\", \"mobile_phone\":\"%(mobile_phone)s\", \"last_name\":\"%(last_name)s\", \"username_stripped\":\"%(username_stripped)s\", \"email\":\"%(email)s\"}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit RADIUSClient - forward reply items on",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Foward reply items true \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.forward_reply_items).to.equal(true);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "forward_reply_items",
											"value": "t",
											"type": "text"
										},
										{
											"key": "is_active",
											"value": "0",
											"type": "text",
											"disabled": true
										},
										{
											"key": "secret",
											"value": "12345",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create GroupMapping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Group is Users\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.group).to.equal(\"Users\");",
											"});",
											"",
											"pm.test(\"Field mapping\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.field_mapping).to.equal(\"{\\\"username\\\":\\\"%(username)s\\\",\\\"first_name\\\":\\\"%(first_name)s\\\",\\\"mobile_phone\\\":\\\"%(mobile_phone)s\\\",\\\"group\\\":\\\"%(group)s\\\",\\\"last_name\\\":\\\"%(last_name)s\\\",\\\"username_stripped\\\":\\\"%(username_stripped)s\\\",\\\"email\\\":\\\"%(email)s\\\"}\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"Users\",\n    \"field_mapping\": {\"username\":\"%(username)s\", \"group\":\"%(group)s\", \"first_name\":\"%(first_name)s\", \"mobile_phone\":\"%(mobile_phone)s\", \"last_name\":\"%(last_name)s\", \"username_stripped\":\"%(username_stripped)s\", \"email\":\"%(email)s\"}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create GroupMapping - already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Group mapping already exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.__all__[0]).to.equal(\"Radius client group mapping with this Radius client and Group already exists.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"Users\",\n    \"field_mapping\": {\"username\":\"%(username)s\", \"group\":\"%(group)s\", \"first_name\":\"%(first_name)s\", \"mobile_phone\":\"%(mobile_phone)s\", \"last_name\":\"%(last_name)s\", \"username_stripped\":\"%(username_stripped)s\", \"email\":\"%(email)s\"}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create GroupMapping - group doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Group does not exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.group[0]).to.equal(\"Object with name=notExists does not exist.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"notExists\",\n    \"field_mapping\": {\"username\":\"%(username)s\", \"group\":\"%(group)s\", \"first_name\":\"%(first_name)s\", \"mobile_phone\":\"%(mobile_phone)s\", \"last_name\":\"%(last_name)s\", \"username_stripped\":\"%(username_stripped)s\", \"email\":\"%(email)s\"}\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create GroupMapping - radius client doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Radius client does not exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.radius_client[0]).to.equal(\"Object with name=test2 does not exist.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"Users\",\n    \"field_mapping\": {\"username\":\"%(username)s\", \"group\":\"%(group)s\", \"first_name\":\"%(first_name)s\", \"mobile_phone\":\"%(mobile_phone)s\", \"last_name\":\"%(last_name)s\", \"username_stripped\":\"%(username_stripped)s\", \"email\":\"%(email)s\"}\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test2/groupmapping/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test2",
										"groupmapping",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create GroupMapping - invalid name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"Users\",\n    \"field_mapping\": {\"username\":\"%(username)s\", \"group\":\"%(group)s\", \"first_name\":\"%(first_name)s\", \"mobile_phone\":\"%(mobile_phone)s\", \"last_name\":\"%(last_name)s\", \"username_stripped\":\"%(username_stripped)s\", \"email\":\"%(email)s\"}\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/A1·$%A/groupmapping/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"A1·$%A",
										"groupmapping",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create GroupMapping - field mapping key wrong",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"firstname is not valid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.field_mapping[0]).to.equal(\"The value of the key 'firstname' is not valid\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"Users\",\n    \"field_mapping\": {\"username\":\"%(username)s\", \"group\":\"%(group)s\", \"firstname\":\"%(firstname)s\", \"mobile\":\"%(mobile_phone)s\", \"lastname\":\"%(last_name)s\", \"username_stripped\":\"%(username_stripped)s\", \"mail\":\"%(email)s\"}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create GroupMapping - Invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasdas",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"Users\",\n    \"field_mapping\": {\"username\":\"%(username)s\", \"group\":\"%(group)s\", \"firstname\":\"%(firstname)s\", \"mobile\":\"%(mobile)s\", \"lastname\":\"%(lastname)s\", \"username_stripped\":\"%(username_stripped)s\", \"mail\":\"%(mail)s\"}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create GroupMapping - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"Users\",\n    \"field_mapping\": {\"username\":\"%(username)s\", \"group\":\"%(group)s\", \"firstname\":\"%(firstname)s\", \"mobile\":\"%(mobile)s\", \"lastname\":\"%(lastname)s\", \"username_stripped\":\"%(username_stripped)s\", \"mail\":\"%(mail)s\"}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get RADIUSClient GroupMapping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Group is Users\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.group).to.equal(\"Users\");",
											"});",
											"",
											"pm.test(\"field_mapping\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.field_mapping).to.equal(\"{\\\"username\\\":\\\"%(username)s\\\",\\\"first_name\\\":\\\"%(first_name)s\\\",\\\"mobile_phone\\\":\\\"%(mobile_phone)s\\\",\\\"group\\\":\\\"%(group)s\\\",\\\"last_name\\\":\\\"%(last_name)s\\\",\\\"username_stripped\\\":\\\"%(username_stripped)s\\\",\\\"email\\\":\\\"%(email)s\\\"}\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/Users/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										"Users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get RADIUSClient GroupMapping - group doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Not found\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/noExists/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										"noExists",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get RADIUSClient GroupMapping - radius doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Not found\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/noExists/groupmapping/Users/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"noExists",
										"groupmapping",
										"Users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get RADIUSClient GroupMapping - invalid group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/noExists/groupmapping/{{userInvalid}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"noExists",
										"groupmapping",
										"{{userInvalid}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get RADIUSClient GroupMapping - invalid radius client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/{{userInvalid}}/groupmapping/Users/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"{{userInvalid}}",
										"groupmapping",
										"Users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get RADIUSClient GroupMapping - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasdasd",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/Users/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										"Users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get RADIUSClient GroupMapping - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/Users/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										"Users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "List GroupMapping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Count is 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.count).to.equal(1);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "List GroupMapping - radiusClient doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Count is 0\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.count).to.equal(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/{{notExists}}/groupmapping/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"{{notExists}}",
										"groupmapping",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "List GroupMapping - invalid radius client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/{{userInvalid}}/groupmapping/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"{{userInvalid}}",
										"groupmapping",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "List GroupMapping - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasd",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "List GroupMapping - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit RADIUSClient GroupMapping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"Helpdesk\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/Users/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										"Users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit RADIUSClient GroupMapping - group doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Group doesnt exists \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.group[0]).to.equal(\"Object with name=notExists does not exist.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"notExists\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/Helpdesk/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										"Helpdesk",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit RADIUSClient GroupMapping - group mapping doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Group mapping doesnt exists \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"Users\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/notExists/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										"notExists",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit RADIUSClient GroupMapping - group mapping invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"Users\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/{{userInvalid}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										"{{userInvalid}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit RADIUSClient GroupMapping - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "aasdasd",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"Users\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/test/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										"test",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit RADIUSClient GroupMapping - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\": \"Users\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/test/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										"test",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete RADIUSClient GroupMapping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/Helpdesk/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										"Helpdesk",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete RADIUSClient GroupMapping - group mapping doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Not found \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/Management/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										"Management",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete RADIUSClient GroupMapping - invalid group mapping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/{{userInvalid}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										"{{userInvalid}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete RADIUSClient GroupMapping - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasd",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/Users/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										"Users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete RADIUSClient GroupMapping - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/radiusclient/test/groupmapping/Users/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"radiusclient",
										"test",
										"groupmapping",
										"Users",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GatewayConfiguration",
					"item": [
						{
							"name": "List gateway conf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Count is 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.count).to.equal(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/gatewayconfiguration/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"gatewayconfiguration",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "List gateway conf - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "asdasdas",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/gatewayconfiguration/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"gatewayconfiguration",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "List gateway conf - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/gatewayconfiguration/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"gatewayconfiguration",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit gateway conf - false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"is_management_enabled false \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.is_management_enabled).to.equal(false);",
											"});",
											"",
											"pm.test(\"is_registration_enabled false \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.is_registration_enabled).to.equal(false);",
											"});",
											"",
											"pm.test(\"is_userportal_enabled false \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.is_registration_enabled).to.equal(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "is_userportal_enabled",
											"value": "false",
											"type": "text"
										},
										{
											"key": "is_management_enabled",
											"value": "false",
											"type": "text"
										},
										{
											"key": "management_ips_whitelist",
											"value": "0.0.0.0/0",
											"type": "text"
										},
										{
											"key": "is_registration_enabled",
											"value": "false",
											"type": "text"
										},
										{
											"key": "vendor_custom_js",
											"value": "alert('hi!');",
											"type": "text",
											"disabled": true
										},
										{
											"key": "vendor_custom_css",
											"value": ".body { color: '#ff0000'; }",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/gatewayconfiguration/{{gateway_configuration}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"gatewayconfiguration",
										"{{gateway_configuration}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit gateway conf - true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"is_management_enabled true \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.is_management_enabled).to.equal(true);",
											"});",
											"",
											"pm.test(\"is_registration_enabled true \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.is_registration_enabled).to.equal(true);",
											"});",
											"",
											"pm.test(\"is_userportal_enabled true \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.is_registration_enabled).to.equal(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "is_userportal_enabled",
											"value": "true",
											"type": "text"
										},
										{
											"key": "is_management_enabled",
											"value": "true",
											"type": "text"
										},
										{
											"key": "management_ips_whitelist",
											"value": "0.0.0.0/0",
											"type": "text"
										},
										{
											"key": "is_registration_enabled",
											"value": "true",
											"type": "text"
										},
										{
											"key": "vendor_custom_js",
											"value": "alert('hi!');",
											"type": "text",
											"disabled": true
										},
										{
											"key": "vendor_custom_css",
											"value": ".body { color: '#ff0000'; }",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/gatewayconfiguration/{{gateway_configuration}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"gatewayconfiguration",
										"{{gateway_configuration}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit gateway conf - gateway conf doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Gateway configuration doesnt exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "is_userportal_enabled",
											"value": "true",
											"type": "text"
										},
										{
											"key": "is_management_enabled",
											"value": "true",
											"type": "text"
										},
										{
											"key": "management_ips_whitelist",
											"value": "0.0.0.0/0",
											"type": "text"
										},
										{
											"key": "is_registration_enabled",
											"value": "true",
											"type": "text"
										},
										{
											"key": "vendor_custom_js",
											"value": "alert('hi!');",
											"type": "text",
											"disabled": true
										},
										{
											"key": "vendor_custom_css",
											"value": ".body { color: '#ff0000'; }",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/gatewayconfiguration/{{notExists}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"gatewayconfiguration",
										"{{notExists}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit gateway conf - gateway conf invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "is_userportal_enabled",
											"value": "true",
											"type": "text"
										},
										{
											"key": "is_management_enabled",
											"value": "true",
											"type": "text"
										},
										{
											"key": "management_ips_whitelist",
											"value": "0.0.0.0/0",
											"type": "text"
										},
										{
											"key": "is_registration_enabled",
											"value": "true",
											"type": "text"
										},
										{
											"key": "vendor_custom_js",
											"value": "alert('hi!');",
											"type": "text",
											"disabled": true
										},
										{
											"key": "vendor_custom_css",
											"value": ".body { color: '#ff0000'; }",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/gatewayconfiguration/{{userInvalid}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"gatewayconfiguration",
										"{{userInvalid}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit gateway conf - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalid_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "is_userportal_enabled",
											"value": "true",
											"type": "text"
										},
										{
											"key": "is_management_enabled",
											"value": "true",
											"type": "text"
										},
										{
											"key": "management_ips_whitelist",
											"value": "0.0.0.0/0",
											"type": "text"
										},
										{
											"key": "is_registration_enabled",
											"value": "true",
											"type": "text"
										},
										{
											"key": "vendor_custom_js",
											"value": "alert('hi!');",
											"type": "text",
											"disabled": true
										},
										{
											"key": "vendor_custom_css",
											"value": ".body { color: '#ff0000'; }",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/gatewayconfiguration/{{gateway_configuration}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"gatewayconfiguration",
										"{{gateway_configuration}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit gateway conf - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "is_userportal_enabled",
											"value": "true",
											"type": "text"
										},
										{
											"key": "is_management_enabled",
											"value": "true",
											"type": "text"
										},
										{
											"key": "management_ips_whitelist",
											"value": "0.0.0.0/0",
											"type": "text"
										},
										{
											"key": "is_registration_enabled",
											"value": "true",
											"type": "text"
										},
										{
											"key": "vendor_custom_js",
											"value": "alert('hi!');",
											"type": "text",
											"disabled": true
										},
										{
											"key": "vendor_custom_css",
											"value": ".body { color: '#ff0000'; }",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/gatewayconfiguration/{{gateway_configuration}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"gatewayconfiguration",
										"{{gateway_configuration}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reports",
					"item": [
						{
							"name": "Get transaction logs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/transactionlog/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"transactionlog",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "test",
											"description": "search_fields:'user', 'username', 'serial_number', 'code', 'transaction_id', 'type', 'result', 'reason'",
											"disabled": true
										},
										{
											"key": "q",
											"value": "ACCESS_ALLOWED",
											"disabled": true
										},
										{
											"key": "q",
											"value": "<serial_number>",
											"disabled": true
										},
										{
											"key": "locked",
											"value": "t",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "100",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get transaction logs - negative page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/transactionlog/?page=-1&page_size=100",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"transactionlog",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "test",
											"description": "search_fields:'user', 'username', 'serial_number', 'code', 'transaction_id', 'type', 'result', 'reason'",
											"disabled": true
										},
										{
											"key": "q",
											"value": "ACCESS_ALLOWED",
											"disabled": true
										},
										{
											"key": "q",
											"value": "<serial_number>",
											"disabled": true
										},
										{
											"key": "locked",
											"value": "t",
											"disabled": true
										},
										{
											"key": "page",
											"value": "-1"
										},
										{
											"key": "page_size",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get transaction logs - all on",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/transactionlog/?q=test&q=ACCESS_ALLOWED&page=1&page_size=100",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"transactionlog",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "test",
											"description": "search_fields:'user', 'username', 'serial_number', 'code', 'transaction_id', 'type', 'result', 'reason'"
										},
										{
											"key": "q",
											"value": "ACCESS_ALLOWED"
										},
										{
											"key": "q",
											"value": "<serial_number>",
											"disabled": true
										},
										{
											"key": "locked",
											"value": "t",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "page_size",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get transaction logs - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalid_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/transactionlog/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"transactionlog",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "test",
											"description": "search_fields:'user', 'username', 'serial_number', 'code', 'transaction_id', 'type', 'result', 'reason'",
											"disabled": true
										},
										{
											"key": "q",
											"value": "ACCESS_ALLOWED",
											"disabled": true
										},
										{
											"key": "q",
											"value": "<serial_number>",
											"disabled": true
										},
										{
											"key": "locked",
											"value": "t",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "100",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get transaction logs - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/transactionlog/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"transactionlog",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "test",
											"description": "search_fields:'user', 'username', 'serial_number', 'code', 'transaction_id', 'type', 'result', 'reason'",
											"disabled": true
										},
										{
											"key": "q",
											"value": "ACCESS_ALLOWED",
											"disabled": true
										},
										{
											"key": "q",
											"value": "<serial_number>",
											"disabled": true
										},
										{
											"key": "locked",
											"value": "t",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "100",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Device inventory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/device_inventory/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"device_inventory",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Device inventory - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalid_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/device_inventory/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"device_inventory",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Device inventory - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/device_inventory/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"device_inventory",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Authentication distribution",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/device_auth_distribution/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"device_auth_distribution",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Authentication distribution - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalid_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/device_auth_distribution/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"device_auth_distribution",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Authentication distribution - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/device_auth_distribution/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"device_auth_distribution",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get success authentication rate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/device_auth_rate/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"device_auth_rate",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get success authentication rate - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalid_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/device_auth_rate/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"device_auth_rate",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get success authentication rate - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/device_auth_rate/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"device_auth_rate",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get PhysicalTokens inventory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/physical_tokens_inventory/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"physical_tokens_inventory",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get PhysicalTokens inventory -invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalid_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/physical_tokens_inventory/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"physical_tokens_inventory",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get PhysicalTokens inventory - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/physical_tokens_inventory/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"physical_tokens_inventory",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get License usage report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/licensesusage/?begin_date=2022-03-01&end_date=2022-03-31",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"licensesusage",
										""
									],
									"query": [
										{
											"key": "begin_date",
											"value": "2022-03-01"
										},
										{
											"key": "end_date",
											"value": "2022-03-31"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get License usage report - missing begin_date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"MIssing begin_date\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.begin_date).to.contain(\"This field is required.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/licensesusage/?end_date=2022-01-31",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"licensesusage",
										""
									],
									"query": [
										{
											"key": "begin_date",
											"value": "2022-01-01",
											"disabled": true
										},
										{
											"key": "end_date",
											"value": "2022-01-31"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get License usage report - missing end_date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"MIssing end_date\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.end_date).to.contain(\"This field is required.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/licensesusage/?begin_date=2022-01-01",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"licensesusage",
										""
									],
									"query": [
										{
											"key": "begin_date",
											"value": "2022-01-01"
										},
										{
											"key": "end_date",
											"value": "2022-01-31",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get License usage report - missing both",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"MIssing end_date\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.end_date).to.contain(\"This field is required.\");",
											"});",
											"",
											"pm.test(\"MIssing begin_date\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.begin_date).to.contain(\"This field is required.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/licensesusage/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"licensesusage",
										""
									],
									"query": [
										{
											"key": "begin_date",
											"value": "2022-01-01",
											"disabled": true
										},
										{
											"key": "end_date",
											"value": "2022-01-31",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get License usage report - wrong date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Wrong begin_date\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Wrong end_date\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.end_date).to.contain(\"Date has wrong format. Use one of these formats instead: YYYY-MM-DD\");",
											"});",
											"",
											"pm.test(\"MIssing begin_date\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.begin_date).to.contain(\"Date has wrong format. Use one of these formats instead: YYYY-MM-DD\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/licensesusage/?begin_date=2022-10-35&end_date=2022-13-31",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"licensesusage",
										""
									],
									"query": [
										{
											"key": "begin_date",
											"value": "2022-10-35"
										},
										{
											"key": "end_date",
											"value": "2022-13-31"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get License usage report - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalid_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/licensesusage/?begin_date=2022-03-01&end_date=2022-03-31",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"licensesusage",
										""
									],
									"query": [
										{
											"key": "begin_date",
											"value": "2022-03-01"
										},
										{
											"key": "end_date",
											"value": "2022-03-31"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get License usage report - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/licensesusage/?begin_date=2022-03-01&end_date=2022-03-31",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"licensesusage",
										""
									],
									"query": [
										{
											"key": "begin_date",
											"value": "2022-03-01"
										},
										{
											"key": "end_date",
											"value": "2022-03-31"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User associations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/associated_users/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"associated_users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User associations - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalid_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/associated_users/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"associated_users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User associations - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/associated_users/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"associated_users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "TODO: (es igual al licesence usage)Get Registration report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/licensesusage/?begin_date=2022-01-01&end_date=2022-01-31",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"licensesusage",
										""
									],
									"query": [
										{
											"key": "begin_date",
											"value": "2022-01-01"
										},
										{
											"key": "end_date",
											"value": "2022-01-31"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Inactive users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/inactive_users/?since_date=2022-01-01",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"inactive_users",
										""
									],
									"query": [
										{
											"key": "since_date",
											"value": "2022-01-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Inactive users - without date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"MIssing since_date\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.since_date).to.contain(\"This field is required.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/inactive_users/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"inactive_users",
										""
									],
									"query": [
										{
											"key": "since_date",
											"value": "2022-01-01",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Inactive users - wrong date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"MIssing since_date\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.since_date).to.contain(\"Date has wrong format. Use one of these formats instead: YYYY-MM-DD\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/inactive_users/?since_date=2022-01-32",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"inactive_users",
										""
									],
									"query": [
										{
											"key": "since_date",
											"value": "2022-01-32"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Inactive users - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalid_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/inactive_users/?since_date=2022-01-01",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"inactive_users",
										""
									],
									"query": [
										{
											"key": "since_date",
											"value": "2022-01-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Inactive users - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/inactive_users/?since_date=2022-01-01",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"inactive_users",
										""
									],
									"query": [
										{
											"key": "since_date",
											"value": "2022-01-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users per repository",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/users/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users per repository - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalid_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/users/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users per repository - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/reports/users/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"reports",
										"users",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Permission",
					"item": [
						{
							"name": "Add Group Permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "codename",
											"value": "device-list",
											"type": "text"
										},
										{
											"key": "app_name",
											"value": "user_api",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/permissions/add/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"permissions",
										"add",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Group Permissions - Missing app_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Already exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.app_name[0]).to.equal(\"insufficient privileges\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "codename",
											"value": "device-list",
											"type": "text"
										},
										{
											"key": "app_name",
											"value": "user_api",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/permissions/add/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"permissions",
										"add",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Group Permissions - Missing codename",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Missing codename\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.codename[0]).to.equal(\"This field is required.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "codename",
											"value": "device-list",
											"type": "text",
											"disabled": true
										},
										{
											"key": "app_name",
											"value": "user_api",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/permissions/add/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"permissions",
										"add",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Group Permissions - wrong codename",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Missing codename\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "codename",
											"value": "device-listed",
											"type": "text"
										},
										{
											"key": "app_name",
											"value": "user_api",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/permissions/add/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"permissions",
										"add",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Group Permissions - group doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Missing codename\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "codename",
											"value": "device-list",
											"type": "text"
										},
										{
											"key": "app_name",
											"value": "user_api",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{notExists}}/permissions/add/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{notExists}}",
										"permissions",
										"add",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Group Permissions - invalid group name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "codename",
											"value": "device-list",
											"type": "text"
										},
										{
											"key": "app_name",
											"value": "user_api",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{userInvalid}}/permissions/add/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{userInvalid}}",
										"permissions",
										"add",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Group Permissions - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalid_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "codename",
											"value": "device-list",
											"type": "text"
										},
										{
											"key": "app_name",
											"value": "user_api",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/permissions/add/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"permissions",
										"add",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Group Permissions - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "codename",
											"value": "device-list",
											"type": "text"
										},
										{
											"key": "app_name",
											"value": "user_api",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/permissions/add/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"permissions",
										"add",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Group Permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "codename",
											"value": "device-list",
											"type": "text"
										},
										{
											"key": "app_name",
											"value": "user_api",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/permissions/remove/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"permissions",
										"remove",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Group Permissions - missing app_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Already exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.app_name[0]).to.equal(\"insufficient privileges\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "codename",
											"value": "device-list",
											"type": "text"
										},
										{
											"key": "app_name",
											"value": "user_api",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/permissions/remove/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"permissions",
										"remove",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Group Permissions - missing codename",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Missing codename\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.codename[0]).to.equal(\"This field is required.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "codename",
											"value": "device-list",
											"type": "text",
											"disabled": true
										},
										{
											"key": "app_name",
											"value": "user_api",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/permissions/remove/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"permissions",
										"remove",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Group Permissions - wrong codename",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Missing codename\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "codename",
											"value": "device-listed",
											"type": "text"
										},
										{
											"key": "app_name",
											"value": "user_api",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/permissions/remove/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"permissions",
										"remove",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Group Permissions - group doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Missing codename\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "codename",
											"value": "device-list",
											"type": "text"
										},
										{
											"key": "app_name",
											"value": "user_api",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{notExists}}/permissions/remove/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{notExists}}",
										"permissions",
										"remove",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Group Permissions - invalid group name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "codename",
											"value": "device-list",
											"type": "text"
										},
										{
											"key": "app_name",
											"value": "user_api",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{userInvalid}}/permissions/remove/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{userInvalid}}",
										"permissions",
										"remove",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Group Permissions - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalid_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "codename",
											"value": "device-list",
											"type": "text"
										},
										{
											"key": "app_name",
											"value": "user_api",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/permissions/remove/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"permissions",
										"remove",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Group Permissions - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "codename",
											"value": "device-list",
											"type": "text"
										},
										{
											"key": "app_name",
											"value": "user_api",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/permissions/remove/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"permissions",
										"remove",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Group Permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/permissions/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"permissions",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Group Permissions - group not exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Missing codename\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{notExists}}/permissions/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{notExists}}",
										"permissions",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Group Permissions - invalid group name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{userInvalid}}/permissions/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{userInvalid}}",
										"permissions",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Group Permissions - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalid_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/permissions/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"permissions",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Group Permissions - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/permissions/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										"permissions",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Emergency",
					"item": [
						{
							"name": "Associate Backup  token with user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get Fast:Auth SN\", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData)",
											"    pm.expect(jsonData['serial_number'])!=null;",
											"    pm.collectionVariables.set(\"backup-sn\", jsonData['serial_number']);",
											"    pm.collectionVariables.set(\"backup-instance-id\", jsonData['association_instance_id']);",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "device_type",
											"value": "Backup",
											"type": "text"
										},
										{
											"key": "backuptoken_attempts",
											"value": "2",
											"type": "text"
										},
										{
											"key": "backuptoken_timeout",
											"value": "30",
											"description": "minutes",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Backup  token with user - already associated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Already associated\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"TOKEN_TYPE_ALREADY_ASSOCIATED\");",
											"});",
											"",
											"/*",
											"pm.test(\"Get Fast:Auth SN\", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData)",
											"    pm.expect(jsonData['serial_number'])!=null;",
											"    pm.collectionVariables.set(\"backup-sn\", jsonData['serial_number']);",
											"    pm.collectionVariables.set(\"backup-instance-id\", jsonData['association_instance_id']);",
											"    ",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "device_type",
											"value": "Backup",
											"type": "text"
										},
										{
											"key": "backuptoken_attempts",
											"value": "2",
											"type": "text"
										},
										{
											"key": "backuptoken_timeout",
											"value": "30",
											"description": "minutes",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Backup token from user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get Fast:Auth SN\", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData)",
											"    pm.expect(jsonData['serial_number'])!=null;",
											"    pm.collectionVariables.set(\"backup-sn\", jsonData['serial_number']);",
											"    pm.collectionVariables.set(\"backup-instance-id\", jsonData['association_instance_id']);",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Backup/{{backup-sn}}/{{backup-instance-id}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Backup",
										"{{backup-sn}}",
										"{{backup-instance-id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Backup  token with user - negative attempts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Attempt is not 1 or greater\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.backuptoken_attempts[0]).to.equal(\"Ensure this value is greater than or equal to 1.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "device_type",
											"value": "Backup",
											"type": "text"
										},
										{
											"key": "backuptoken_attempts",
											"value": "-1",
											"type": "text"
										},
										{
											"key": "backuptoken_timeout",
											"value": "30",
											"description": "minutes",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Backup  token with user - negative timeout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"timeout is not 5 or greater\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.backuptoken_timeout[0]).to.equal(\"Ensure this value is greater than or equal to 5.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "device_type",
											"value": "Backup",
											"type": "text"
										},
										{
											"key": "backuptoken_attempts",
											"value": "2",
											"type": "text"
										},
										{
											"key": "backuptoken_timeout",
											"value": "-1",
											"description": "minutes",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Backup  token with user - all off",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"attemps is 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.attempts_left).to.equal(1);",
											"});",
											"",
											"pm.test(\"Get Fast:Auth SN\", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData)",
											"    pm.expect(jsonData['serial_number'])!=null;",
											"    pm.collectionVariables.set(\"backup-sn\", jsonData['serial_number']);",
											"    pm.collectionVariables.set(\"backup-instance-id\", jsonData['association_instance_id']);",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "device_type",
											"value": "Backup",
											"type": "text"
										},
										{
											"key": "backuptoken_attempts",
											"value": "2",
											"type": "text",
											"disabled": true
										},
										{
											"key": "backuptoken_timeout",
											"value": "30",
											"description": "minutes",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Backup  token with user - user doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"user not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"USER_NOT_FOUND\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "device_type",
											"value": "Backup",
											"type": "text"
										},
										{
											"key": "backuptoken_attempts",
											"value": "2",
											"type": "text",
											"disabled": true
										},
										{
											"key": "backuptoken_timeout",
											"value": "30",
											"description": "minutes",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{notExists}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{notExists}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Backup  token with user - invalid user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "device_type",
											"value": "Backup",
											"type": "text"
										},
										{
											"key": "backuptoken_attempts",
											"value": "2",
											"type": "text",
											"disabled": true
										},
										{
											"key": "backuptoken_timeout",
											"value": "30",
											"description": "minutes",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{userInvalid}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{userInvalid}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Backup  token with user - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalid_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "device_type",
											"value": "Backup",
											"type": "text"
										},
										{
											"key": "backuptoken_attempts",
											"value": "2",
											"type": "text",
											"disabled": true
										},
										{
											"key": "backuptoken_timeout",
											"value": "30",
											"description": "minutes",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Backup  token with user - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "device_type",
											"value": "Backup",
											"type": "text"
										},
										{
											"key": "backuptoken_attempts",
											"value": "2",
											"type": "text",
											"disabled": true
										},
										{
											"key": "backuptoken_timeout",
											"value": "30",
											"description": "minutes",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get code from Backup token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"otp exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.otp).to.not.empty",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/devices/Backup/{{backup-sn}}/{{backup-instance-id}}/code/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"devices",
										"Backup",
										"{{backup-sn}}",
										"{{backup-instance-id}}",
										"code",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get code from Backup token - token not exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"DEVICE_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/devices/Backup/{{backup-sn}}/{{notExists}}/code/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"devices",
										"Backup",
										"{{backup-sn}}",
										"{{notExists}}",
										"code",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get code from Backup token - invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/devices/Backup/{{backup-sn}}/{{userInvalid}}/code/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"devices",
										"Backup",
										"{{backup-sn}}",
										"{{userInvalid}}",
										"code",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get code from Backup token - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalid_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/devices/Backup/{{backup-sn}}/{{backup-instance-id}}/code/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"devices",
										"Backup",
										"{{backup-sn}}",
										"{{backup-instance-id}}",
										"code",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get code from Backup token - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/devices/Backup/{{backup-sn}}/{{backup-instance-id}}/code/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"devices",
										"Backup",
										"{{backup-sn}}",
										"{{backup-instance-id}}",
										"code",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Backup token to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Backup/{{backup-sn}}/{{backup-instance-id}}/send/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Backup",
										"{{backup-sn}}",
										"{{backup-instance-id}}",
										"send",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Backup token to user - backup code desnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Device not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"DEVICE_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Backup/10000/{{backup-instance-id}}/send/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Backup",
										"10000",
										"{{backup-instance-id}}",
										"send",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Backup token to user - user doesnt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"User does not exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"USER_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{notExists}}/devices/Backup/{{backup-sn}}/{{backup-instance-id}}/send/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{notExists}}",
										"devices",
										"Backup",
										"{{backup-sn}}",
										"{{backup-instance-id}}",
										"send",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Backup token from user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Success \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"SUCCESS\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Backup/{{backup-sn}}/{{backup-instance-id}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Backup",
										"{{backup-sn}}",
										"{{backup-instance-id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Backup token from user - device not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"DEVICE_NOT_FOUND\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Backup/{{backup-sn}}/{{backup-instance-id}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Backup",
										"{{backup-sn}}",
										"{{backup-instance-id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Backup token from user - user not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.equal(\"USER_NOT_FOUND\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{notExists}}/devices/Backup/{{backup-sn}}/{{backup-instance-id}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{notExists}}",
										"devices",
										"Backup",
										"{{backup-sn}}",
										"{{backup-instance-id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Backup token from user - user invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{userInvalid}}/devices/Backup/{{backup-sn}}/{{backup-instance-id}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{userInvalid}}",
										"devices",
										"Backup",
										"{{backup-sn}}",
										"{{backup-instance-id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Backup token from user - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid token \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalid_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Backup/{{backup-sn}}/{{backup-instance-id}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Backup",
										"{{backup-sn}}",
										"{{backup-instance-id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Backup token from user - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Missing token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.equal(\"Authentication credentials were not provided.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user}}/devices/Backup/{{backup-sn}}/{{backup-instance-id}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user}}",
										"devices",
										"Backup",
										"{{backup-sn}}",
										"{{backup-instance-id}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Remainings",
					"item": [
						{
							"name": "Delete user - test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "ataboada@gmail.com",
											"type": "text"
										},
										{
											"key": "mobile_phone",
											"value": "541156102886",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{test-tenant-user}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{test-tenant-user}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user - test2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "ataboada@gmail.com",
											"type": "text"
										},
										{
											"key": "mobile_phone",
											"value": "541156102886",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user2}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user2}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user - test3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "ataboada@gmail.com",
											"type": "text"
										},
										{
											"key": "mobile_phone",
											"value": "541156102886",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v1/admin/user/{{user3}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v1",
										"admin",
										"user",
										"{{user3}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Group  (ONLY MT)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{group}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{tenant-lan-domain}}:{{tenant-api-port}}/api/v2/admin/group/{{group}}/",
									"protocol": "https",
									"host": [
										"{{tenant-lan-domain}}"
									],
									"port": "{{tenant-api-port}}",
									"path": [
										"api",
										"v2",
										"admin",
										"group",
										"{{group}}",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{tenant-management-token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{oc-access-token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"utils = {",
					"    sleep: function(miliseconds) {",
					"        var currentTime = new Date().getTime();",
					"        while (currentTime + miliseconds >= new Date().getTime()) {}",
					"    },",
					"",
					"};",
					"",
					"test = {",
					"    checkVersionTest: function(status){",
					"        pm.test(\"Appliance-version is ok\", function () {",
					"            pm.expect(status[\"appliance-version\"]).to.eqls(environment[\"safewalk-version\"]);    ",
					"        })",
					"    },",
					"",
					"    tenantRunningTest: function(status){",
					"        pm.test(\"Tenant is running\", function () {",
					"            pm.expect(status[\"runtime-info\"].status).to.eqls(\"r\");",
					"        })",
					"    },",
					"",
					"    tenantStoppedTest: function(status){",
					"        pm.test(\"Tenant is stopped\", function () {",
					"            pm.expect(status[\"runtime-info\"].status).to.eqls(\"s\");",
					"        })",
					"    },",
					"",
					"    countIs: function(status, number){",
					"        pm.test(\"Count is \" + number, function () {",
					"            pm.expect(status[\"count\"]).to.eqls(number);",
					"        })",
					"    },",
					"",
					"    checkLicenses: function(status, numberOfLicenses){",
					"        pm.test(\"Total licenses are \" + numberOfLicenses, function () {",
					"            pm.expect(status[\"licenses\"].total).to.eqls(numberOfLicenses);",
					"        })",
					"    }",
					"",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "safewalk-server",
			"value": "oc.safewalk"
		},
		{
			"key": "tenant-id",
			"value": "t1",
			"disabled": true
		},
		{
			"key": "server-port",
			"value": "8443"
		},
		{
			"key": "tenant-lan-domain",
			"value": "t1.safewalk"
		},
		{
			"key": "tenant-dmz-domain",
			"value": "t1.mt.safewalk.info"
		},
		{
			"key": "tenant-api-port",
			"value": "8449"
		},
		{
			"key": "appliance-version",
			"value": "4.2.6"
		},
		{
			"key": "tenant-management-token",
			"value": ""
		},
		{
			"key": "test-tenant-user",
			"value": "test",
			"type": "string"
		},
		{
			"key": "test-tenant-password",
			"value": "test",
			"type": "string"
		},
		{
			"key": "fast-auth-sn",
			"value": ""
		},
		{
			"key": "totp-auth-sn",
			"value": ""
		},
		{
			"key": "totp-auth-instance-id",
			"value": ""
		},
		{
			"key": "fast-auth-instance-id",
			"value": ""
		},
		{
			"key": "fast-auth-instance-id-second",
			"value": "",
			"type": "string"
		},
		{
			"key": "backup-sn",
			"value": ""
		},
		{
			"key": "backup-instance-id",
			"value": ""
		},
		{
			"key": "virtual-auth-sn",
			"value": ""
		},
		{
			"key": "virtual-instance-id",
			"value": ""
		},
		{
			"key": "virtual-otp",
			"value": "",
			"type": "string"
		},
		{
			"key": "backup-code",
			"value": "",
			"type": "string"
		},
		{
			"key": "hotp-flex-sn",
			"value": "",
			"type": "string"
		},
		{
			"key": "ldap_configuration_id",
			"value": ""
		},
		{
			"key": "async-challenge",
			"value": "",
			"type": "string"
		}
	]
}